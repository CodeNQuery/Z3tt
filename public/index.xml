<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cédric Scherer</title>
    <link>https://cedricscherer.com/</link>
    <description>Recent content on Cédric Scherer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://cedricscherer.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2-Day Workshop on &#34;Graphic Design with ggplot2&#34; at rstudio::conf 2022</title>
      <link>https://cedricscherer.com/2022/08/09/2-day-workshop-on-graphic-design-with-ggplot2-at-rstudioconf-2022/</link>
      <pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/2022/08/09/2-day-workshop-on-graphic-design-with-ggplot2-at-rstudioconf-2022/</guid>
      <description>&lt;img src=&#34;https://raw.githubusercontent.com/rstudio-conf-2022/ggplot2-graphic-design/main/images/logo.png&#34; style=&#34;float:right;padding: 0 0 0 10px;margin: 20px -10px 0 0 &#34; fig-alt=&#34;Course Hex Logo&#34; width=&#34;175&#34;&gt;
&lt;p&gt;&lt;strong&gt;End of July, I had the honor to teach a &lt;a href=&#39;https://www.rstudio.com/blog/rstudio-conf-2022-workshops/&#39; style=&#39;font-weight:800;&#39;&gt;2-day, in-person workshop on &amp;ldquo;Graphic Design with ggplot2&amp;rdquo; at the rstudio::conf(2022)&lt;/a&gt; in Washington DC. Invited by RStudio (now named &lt;a href=&#39;https://posit.co/&#39; style=&#39;font-weight:800;&#39;&gt;Posit&lt;/a&gt;), I developed a new course that covers the most important steps and helpful tips to create visually appealing, engaging and complex graphics with ggplot2. The course focused on the main concepts of the grammar of graphics and used hands-on examples to explore ggplot2’s utility to create multi-layered, more complex graphs. &lt;a href=&#39;https://rstudio-conf-2022.github.io/ggplot2-graphic-design/&#39; style=&#39;font-weight:800;&#39;&gt;All course resources are available as open-source material on the course page.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The course webpage as well ass the slidedecks and the exercises and solutions were developed with the new open-source scientific and technical publishing system &lt;a href=&#39;https://quarto.org/&#39; target=&#34;_blank&#34;&gt;Quarto&lt;/a&gt;. The new workshop development was a perfect opportunity to give it a try and the experience was overall wonderful—the &lt;a href=&#39;https://revealjs.com/&#39; target=&#34;_blank&#34;&gt;reveal.js&lt;/a&gt; integration for the slides works perfect and allows for a lot of customization. Thanks to Marco Sciaini for helping me setting up the course webpage which was, after learning about a few quirks, a smooth experience as well.&lt;/p&gt;
&lt;img src=&#34;img/rstudioconf-workshop/graphic-design-course-page.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://rstudio-conf-2022.github.io/ggplot2-graphic-design&#39;, &#39;blank&#39;);&#34;&gt;
&lt;figcaption&gt;The &lt;a href=&#39;https://rstudio-conf-2022.github.io/ggplot2-graphic-design&#39;&gt;course webpage&lt;/a&gt; which gives an overview of the course objectives and links to all session and the &lt;a href=&#39;https://github.com/rstudio-conf-2022/ggplot2-graphic-design&#39;&gt;GitHub repository&lt;/a&gt;.&lt;/figcaption&gt;
&lt;iframe class=&#34;slide-deck&#34; src=&#34;https://rstudio-conf-2022.github.io/ggplot2-graphic-design/materials/01_introduction.html&#34; height=&#34;420&#34; width=&#34;747&#34; style=&#34;border: 1px solid #2e3846;&#34;&gt;&lt;/iframe&gt;
&lt;figcaption&gt;The slide decks can be hosted as HTML files and thus embedded in the course pages.&lt;/figcaption&gt;
&lt;p&gt;The workshop is structured in 9 sessions, covering both ggplot2 techniques and general data visualization recommendations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#39;https://rstudio-conf-2022.github.io/ggplot2-graphic-design/modules/d1-01_introduction.html&#39; target=&#34;_blank&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://rstudio-conf-2022.github.io/ggplot2-graphic-design/modules/d1-02_concepts_pt1.html&#39; target=&#34;_blank&#34;&gt;Concepts of the ggplot2 Package Pt. 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://rstudio-conf-2022.github.io/ggplot2-graphic-design/modules/d1-05_concepts_pt2.html&#39; target=&#34;_blank&#34;&gt;Concepts of the ggplot2 Package Pt. 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://rstudio-conf-2022.github.io/ggplot2-graphic-design/modules/d1-09_data_com.html&#39; target=&#34;_blank&#34;&gt;Data Communication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://rstudio-conf-2022.github.io/ggplot2-graphic-design/modules/d2-01_lab_ann.html&#39; target=&#34;_blank&#34;&gt;Working with Labels &amp;amp; Annotations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://rstudio-conf-2022.github.io/ggplot2-graphic-design/modules/d2-03_colorful_graphics.html&#39; target=&#34;_blank&#34;&gt;Colorful Graphics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://rstudio-conf-2022.github.io/ggplot2-graphic-design/modules/d2-04_colors.html&#39; target=&#34;_blank&#34;&gt;Working with Colors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;Working with Layouts &amp; Composition&#39; target=&#34;_blank&#34;&gt;Working with Layouts and Composition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://rstudio-conf-2022.github.io/ggplot2-graphic-design/modules/d2-08_project.html&#39; target=&#34;_blank&#34;&gt;Group Projects&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The session pages contain not only the slides but also hands-on R codes, recap notes, exercises including prepared scripts (either as Quarto or Rmarkdown reports) and step-by-step solutions.&lt;/p&gt;
&lt;img src=&#34;img/rstudioconf-workshop/session-example-colors.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://rstudio-conf-2022.github.io/ggplot2-graphic-design/modules/d2-04_colors.html&#39;, &#39;blank&#39;);&#34;&gt;
&lt;figcaption&gt;The session pages feature slides, session outline, recap and exercises as well as links to the hands-on codes and solutions.&lt;/figcaption&gt;
&lt;img src=&#34;img/rstudioconf-workshop/exercise-code-example-annotations.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://rstudio-conf-2022.github.io/ggplot2-graphic-design/materials/exercises/05_annotations_ex1.html&#39;, &#39;blank&#39;);&#34;&gt;
&lt;figcaption&gt;The exercises are pre-written Quarto (or Rmarkdown) reports to allow for a quick start and the ability to keep a rendered version of the personal solution.&lt;/figcaption&gt;
&lt;p&gt;Here is an overview of all recaps:&lt;/p&gt;
&lt;h4 id=&#34;concepts-of-the-ggplot2-package-pt-1&#34;&gt;Concepts of the &lt;code&gt;{ggplot2}&lt;/code&gt; Package Pt. 1&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;{ggplot2}&lt;/code&gt;&lt;/strong&gt; is a powerful library for reproducible graphic design&lt;/li&gt;
&lt;li&gt;the components follow a consistent syntax&lt;/li&gt;
&lt;li&gt;each ggplot needs at least &lt;strong&gt;data&lt;/strong&gt;, some &lt;strong&gt;aesthetics&lt;/strong&gt;, and a &lt;strong&gt;layer&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;we &lt;strong&gt;set&lt;/strong&gt; constant propeties outside &lt;code&gt;aes()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip; and &lt;strong&gt;map&lt;/strong&gt; data-related properties inside &lt;code&gt;aes()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;local settings and mappings override global properties&lt;/li&gt;
&lt;li&gt;grouping allows applying layers for subsets&lt;/li&gt;
&lt;li&gt;we can store a ggplot object and extend it afterwards&lt;/li&gt;
&lt;li&gt;we can change the appearance for all plots with &lt;code&gt;theme_set()&lt;/code&gt; and &lt;code&gt;theme_update()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;concepts-of-the-ggplot2-package-pt-2&#34;&gt;Concepts of the &lt;code&gt;{ggplot2}&lt;/code&gt; Package Pt. 2&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;facet_*()&lt;/code&gt; functions allow to create small multiples&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale_*()&lt;/code&gt; functions translate between aesthetics and properties&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;*_continuous()&lt;/code&gt; for numerical data&lt;/li&gt;
&lt;li&gt;&amp;hellip; and &lt;code&gt;*_discrete()&lt;/code&gt; for categorical data&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;scale_color|fill_*()&lt;/code&gt; to customize data-related colors&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coord_*()&lt;/code&gt; functions interpret the positional aesthetics, e.g. create polar plots or work with spatial projections&lt;/li&gt;
&lt;li&gt;be careful when adjusting axis limits:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scale_*_continuous(limits)&lt;/code&gt; removes the data outside the range&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coord_*(*lim)&lt;/code&gt; keeps the data and zooms into the range&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;data-communication&#34;&gt;Data Communication&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Visualizing data is helpful to gain insights and discover anomalies&lt;/li&gt;
&lt;li&gt;The design process of data visualizations can be broken down to 4 levels:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Information&lt;/strong&gt;: understand the data and be accurate&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Story&lt;/strong&gt;: be clear about the message of the visualization&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Goal&lt;/strong&gt;: select charts that successfully transport the story&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Visual form&lt;/strong&gt;: follow design rules and data visualization principles&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;working-with-annotations--labels&#34;&gt;Working with Annotations &amp;amp; Labels&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;style labels such as title, axis and legend texts with &lt;code&gt;theme()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;format data-related labels with the &lt;code&gt;labels&lt;/code&gt; argument of &lt;code&gt;scale_*()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;adjust strip text with the &lt;code&gt;facet_*(labeller)&lt;/code&gt; functionality&lt;/li&gt;
&lt;li&gt;add data-related annotations with &lt;code&gt;geom_text|label()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip; and data-unrelated annotations with &lt;code&gt;annotate()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;annotation_custom(rasterGrob())&lt;/code&gt; is a basic way to add images&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{ggtext}&lt;/code&gt; allows to render labels with markdown and basic html&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{ggtext}&lt;/code&gt; also allows to add dynamic linebreaks and images&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{ggrepel}&lt;/code&gt; ensures clever placement of annotations&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ggforce::geom_mark_*()&lt;/code&gt; provide a set of advanced annotations&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;colorful-graphics&#34;&gt;Colorful Graphics&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Pick the right palette type for your visualization
&lt;ul&gt;
&lt;li&gt;use &lt;strong&gt;sequential&lt;/strong&gt; to encode &lt;em&gt;numerical information with order&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;use &lt;strong&gt;diverging&lt;/strong&gt; to encode &lt;em&gt;numerical information with a critical midpoint&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;use &lt;strong&gt;qualitative&lt;/strong&gt; to encode &lt;em&gt;categorical information&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;map the color with the highest contrast of a sequential palette to the most important value&lt;/li&gt;
&lt;li&gt;for categories use a maximum of 6-8 colors&lt;/li&gt;
&lt;li&gt;test for &lt;strong&gt;color blindness&lt;/strong&gt; using a CVD simulator&lt;/li&gt;
&lt;li&gt;check the &lt;strong&gt;contrast&lt;/strong&gt; of your data and text colors&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;avoid rainbow palettes!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;working-with-colors&#34;&gt;Working with Colors&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;use &lt;strong&gt;categorical&lt;/strong&gt; palettes for &lt;strong&gt;qualitative&lt;/strong&gt; data
&lt;ul&gt;
&lt;li&gt;e.g. &lt;code&gt;scale_*_discrete()&lt;/code&gt; and &lt;code&gt;scale_*_manual()&lt;/code&gt; for custom options&lt;/li&gt;
&lt;li&gt;e.g. &lt;code&gt;scale_*_viridis_d&lt;/code&gt; and &lt;code&gt;scale_*_brewer()&lt;/code&gt; for pre-defined options&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;use &lt;strong&gt;sequential or diverging&lt;/strong&gt; palettes for &lt;strong&gt;quantitative&lt;/strong&gt; data
&lt;ul&gt;
&lt;li&gt;e.g. &lt;code&gt;scale_*_gradient()&lt;/code&gt; or &lt;code&gt;scale_*_gradient2()&lt;/code&gt; for custom options&lt;/li&gt;
&lt;li&gt;e.g. &lt;code&gt;scale_*_viridis_c&lt;/code&gt; and &lt;code&gt;scale_*_distiller()&lt;/code&gt; for pre-defined options&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;various packages provide palettes incl. &lt;code&gt;scale_*&lt;/code&gt; components
&lt;ul&gt;
&lt;li&gt;e.g. &lt;code&gt;{rcartocolors}&lt;/code&gt;, &lt;code&gt;{scico}&lt;/code&gt;, &lt;code&gt;{ggsci}&lt;/code&gt;, &lt;code&gt;{ggthemes}&lt;/code&gt;, &lt;code&gt;{nord}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;those and even more packages return palettes as vectors
&lt;ul&gt;
&lt;li&gt;modify and supply them to &lt;code&gt;scale_*_manual()&lt;/code&gt; and &lt;code&gt;scale_*_gradientn()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;use &lt;strong&gt;&lt;code&gt;after_scale&lt;/code&gt;&lt;/strong&gt; to modify and recycle color scales&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;working-with-layouts--composition&#34;&gt;Working with Layouts &amp;amp; Composition&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;guides&lt;/strong&gt; are the combination of scales and legends&lt;/li&gt;
&lt;li&gt;legends can be either modified with the &lt;code&gt;guide_*&lt;/code&gt; function in &lt;code&gt;scale_*()&lt;/code&gt; or &lt;code&gt;guides()&lt;/code&gt;  and with the &lt;code&gt;theme()&lt;/code&gt; component
qualitative&lt;/li&gt;
&lt;li&gt;&amp;hellip; while quantitative guides are &lt;code&gt;colorbar&lt;/code&gt;, &lt;code&gt;colorsteps&lt;/code&gt; or &lt;code&gt;bins&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;{patchwork}&lt;/code&gt;&lt;/strong&gt; is the most modern and simplest way to compose plots
&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;|&lt;/code&gt; to combine plots&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;plot_layout()&lt;/code&gt; to adjust the layout, widths and heights&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;plot_annotation()&lt;/code&gt; to add tags and general labels&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;inset_element()&lt;/code&gt; to add inset graphics&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Cédric Scherer</title>
      <link>https://cedricscherer.com/</link>
      <pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/</guid>
      <description></description>
    </item>
    
    <item>
      <title>DataViz</title>
      <link>https://cedricscherer.com/tags/dataviz/</link>
      <pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/dataviz/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ggplot2</title>
      <link>https://cedricscherer.com/tags/ggplot2/</link>
      <pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/ggplot2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Posts</title>
      <link>https://cedricscherer.com/post/</link>
      <pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/post/</guid>
      <description></description>
    </item>
    
    <item>
      <title>rstats</title>
      <link>https://cedricscherer.com/tags/rstats/</link>
      <pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/rstats/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tags</title>
      <link>https://cedricscherer.com/tags/</link>
      <pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/</guid>
      <description></description>
    </item>
    
    <item>
      <title>tutorial</title>
      <link>https://cedricscherer.com/tags/tutorial/</link>
      <pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/tutorial/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Workshop</title>
      <link>https://cedricscherer.com/tags/workshop/</link>
      <pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/workshop/</guid>
      <description></description>
    </item>
    
    <item>
      <title>design</title>
      <link>https://cedricscherer.com/tags/design/</link>
      <pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/design/</guid>
      <description></description>
    </item>
    
    <item>
      <title>equality</title>
      <link>https://cedricscherer.com/tags/equality/</link>
      <pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/equality/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Europe</title>
      <link>https://cedricscherer.com/tags/europe/</link>
      <pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/europe/</guid>
      <description></description>
    </item>
    
    <item>
      <title>International Women&#39;s Day 2022: The Pay Gap in Europe</title>
      <link>https://cedricscherer.com/2022/03/08/international-womens-day-2022-the-pay-gap-in-europe/</link>
      <pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/2022/03/08/international-womens-day-2022-the-pay-gap-in-europe/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Sadly, inequality between women and men is still an issue. A metric that is one of the most used to illustrate the inequality is the pay gap. In its simplest, unadjusted form, the pay gap shows the difference between the average gross hourly earnings of men and women, expressed as a percentage of the average gross hourly earnings of men.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In 2020, women&amp;rsquo;s gross hourly earnings were on average 13.0 percentage point (pp) below those of male paid employees in the European Union. This is still a significant gap, but at least it was decreasing over the last years. Unfortunately, this is not the case for all countries in the EU: Latvia, Portugal, Croatia, and Malta have decreasing trends compared to the average pay gap from 2002–2010. Disappointingly, only five out of the 28 EU countries Eurostat provides data for have a pay gap that is smaller than 5 pp (Luxembourg, Romania, Slovenia, Italia, and Poland) with Luxembourg being closest to zero (0.7 pp).&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ec.europa.eu/eurostat/databrowser/view/sdg_05_20/default/table?lang=en&#34;&gt;Eurostat provides the metric&lt;/a&gt; for all EU countries except Iceland and Greece between 2002 and 2020 (but number of years included differ per country). It also provides gropuped metrics for all EU countries and for the 19 countries of the Euro area. The indicator includes all employees working in firms with ten or more employees, without restrictions for age and hours worked. &lt;a href=&#34;https://twitter.com/EU_Eurostat/status/1501840155489013762&#34;&gt;Samples contain about 12 million employees EU-wide and the gross hourly earnings are estimated with high precision at total economy level (sampling error below 1%)&lt;/a&gt;.&lt;/p&gt;
&lt;img src=&#34;img/paygap-europe/paygap_eu_dumbbell.jpg&#34; style=&#34;height: 100%; width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;img/paygap-europe/paygap_eu_dumbbell.jpg&#39;, &#39;blank&#39;);&#34;/&gt;
&lt;figcaption&gt;The dumbbell chart comparing the pay gap from a reference period 2002–2010 (point) with the pay gap in 2020 (arrow head). Colors indicate the trend and countries are sorted by the recent pay gap in decreasing order from left to right.&lt;/figcaption&gt;
&lt;p&gt;My aim was to make a comparison instead of showing the 2020 metric alone. From the beginning, it was clear to me that a &lt;em&gt;typical time series&lt;/em&gt; would not work due to irregular data entries and too many countries. The initial idea was to create a slope chart (see alternative versions below). However, I quickly realized that it is difficult to pick one particular year for comparison as multiple countries were always missing. So I thought of an &lt;em&gt;unusual slope chart&lt;/em&gt; in which the starting points on the left are not aligned vertically but placed according to the first year data is provided. Actually, it is a &lt;em&gt;hybrid of a slope chart and a time series&lt;/em&gt; as it only compares two values, connected by a line, with a continuous date axis.&lt;/p&gt;
&lt;p&gt;As the slope chart was very difficult to read due to the many overlapping lines (an interactive version may be better), I decided to create a &lt;em&gt;dumbbell chart&lt;/em&gt; with the drawback that I had to aggregate the data as showing all the data points made the graphic too overloaded. I decided to choose a reference period by averaging the values provided between 2002 and 2010 and to encode the sample size in the dot size.&lt;/p&gt;
&lt;p&gt;For the first time, I also created a colorful, eye-catching version with larger fonts and less detail to share it on my &lt;a href=&#34;https://www.instagram.com/cedscherer/&#34;&gt;Instagram&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cedricscherer.com/css/hugo-easy-gallery.css&#34; /&gt;

&lt;div class=&#34;gallery caption-position-none caption-effect-fade hover-effect-zoom hover-transition&#34; itemscope itemtype=&#34;http://schema.org/ImageGallery&#34;&gt;
				&lt;div class=&#34;box&#34;&gt;
				  &lt;figure itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
				    &lt;div class=&#34;img&#34; style=&#34;background-image: url(&#39;https://cedricscherer.com/img/paygap-europe/insta/Pay_Gap_in_Europe_for_Instagram_1.png&#39;);&#34; &gt;
				      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://cedricscherer.com/img/paygap-europe/insta/Pay_Gap_in_Europe_for_Instagram_1.png&#34; alt=&#34;Pay Gap in Europe for Instagram 1&#34; /&gt;
				    &lt;/div&gt;
			      &lt;figcaption&gt;
		          &lt;p&gt;Pay Gap in Europe for Instagram 1&lt;/p&gt;
			      &lt;/figcaption&gt;
				    &lt;a href=&#34;https://cedricscherer.com/img/paygap-europe/insta/Pay_Gap_in_Europe_for_Instagram_1.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
				  &lt;/figure&gt;
				&lt;/div&gt;
				&lt;div class=&#34;box&#34;&gt;
				  &lt;figure itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
				    &lt;div class=&#34;img&#34; style=&#34;background-image: url(&#39;https://cedricscherer.com/img/paygap-europe/insta/Pay_Gap_in_Europe_for_Instagram_2.png&#39;);&#34; &gt;
				      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://cedricscherer.com/img/paygap-europe/insta/Pay_Gap_in_Europe_for_Instagram_2.png&#34; alt=&#34;Pay Gap in Europe for Instagram 2&#34; /&gt;
				    &lt;/div&gt;
			      &lt;figcaption&gt;
		          &lt;p&gt;Pay Gap in Europe for Instagram 2&lt;/p&gt;
			      &lt;/figcaption&gt;
				    &lt;a href=&#34;https://cedricscherer.com/img/paygap-europe/insta/Pay_Gap_in_Europe_for_Instagram_2.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
				  &lt;/figure&gt;
				&lt;/div&gt;
				&lt;div class=&#34;box&#34;&gt;
				  &lt;figure itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
				    &lt;div class=&#34;img&#34; style=&#34;background-image: url(&#39;https://cedricscherer.com/img/paygap-europe/insta/Pay_Gap_in_Europe_for_Instagram_3.png&#39;);&#34; &gt;
				      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://cedricscherer.com/img/paygap-europe/insta/Pay_Gap_in_Europe_for_Instagram_3.png&#34; alt=&#34;Pay Gap in Europe for Instagram 3&#34; /&gt;
				    &lt;/div&gt;
			      &lt;figcaption&gt;
		          &lt;p&gt;Pay Gap in Europe for Instagram 3&lt;/p&gt;
			      &lt;/figcaption&gt;
				    &lt;a href=&#34;https://cedricscherer.com/img/paygap-europe/insta/Pay_Gap_in_Europe_for_Instagram_3.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
				  &lt;/figure&gt;
				&lt;/div&gt;
&lt;/div&gt;
 
 
 
 
   
 
 
 &lt;script src=&#34;https://code.jquery.com/jquery-1.12.4.min.js&#34; integrity=&#34;sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
 &lt;script src=&#34;https://cedricscherer.com/js/load-photoswipe.js&#34;&gt;&lt;/script&gt;
 
 
 &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.css&#34; integrity=&#34;sha256-sCl5PUOGMLfFYctzDW3MtRib0ctyUvI9Qsmq2wXOeBY=&#34; crossorigin=&#34;anonymous&#34; /&gt;
 &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/default-skin/default-skin.min.css&#34; integrity=&#34;sha256-BFeI1V+Vh1Rk37wswuOYn5lsTcaU96hGaI7OUVCLjPc=&#34; crossorigin=&#34;anonymous&#34; /&gt;
 &lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.js&#34; integrity=&#34;sha256-UplRCs9v4KXVJvVY+p+RSo5Q4ilAUXh7kpjyIP5odyc=&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
 &lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe-ui-default.min.js&#34; integrity=&#34;sha256-PWHOlUzc96pMc8ThwRIXPn8yH4NOLu42RQ0b9SpnpFk=&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
 
 
 &lt;div class=&#34;pswp&#34; tabindex=&#34;-1&#34; role=&#34;dialog&#34; aria-hidden=&#34;true&#34;&gt;
 
 &lt;div class=&#34;pswp__bg&#34;&gt;&lt;/div&gt;
 
 &lt;div class=&#34;pswp__scroll-wrap&#34;&gt;
     
     &lt;div class=&#34;pswp__container&#34;&gt;
       &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
       &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
       &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
     &lt;/div&gt;
     
     &lt;div class=&#34;pswp__ui pswp__ui--hidden&#34;&gt;
     &lt;div class=&#34;pswp__top-bar&#34;&gt;
       
       &lt;div class=&#34;pswp__counter&#34;&gt;&lt;/div&gt;
       &lt;button class=&#34;pswp__button pswp__button--close&#34; title=&#34;Close (Esc)&#34;&gt;&lt;/button&gt;
       &lt;button class=&#34;pswp__button pswp__button--share&#34; title=&#34;Share&#34;&gt;&lt;/button&gt;
       &lt;button class=&#34;pswp__button pswp__button--fs&#34; title=&#34;Toggle fullscreen&#34;&gt;&lt;/button&gt;
       &lt;button class=&#34;pswp__button pswp__button--zoom&#34; title=&#34;Zoom in/out&#34;&gt;&lt;/button&gt;
       
       
       &lt;div class=&#34;pswp__preloader&#34;&gt;
         &lt;div class=&#34;pswp__preloader__icn&#34;&gt;
           &lt;div class=&#34;pswp__preloader__cut&#34;&gt;
             &lt;div class=&#34;pswp__preloader__donut&#34;&gt;&lt;/div&gt;
           &lt;/div&gt;
         &lt;/div&gt;
       &lt;/div&gt;
     &lt;/div&gt;
     &lt;div class=&#34;pswp__share-modal pswp__share-modal--hidden pswp__single-tap&#34;&gt;
       &lt;div class=&#34;pswp__share-tooltip&#34;&gt;&lt;/div&gt;
     &lt;/div&gt;
     &lt;button class=&#34;pswp__button pswp__button--arrow--left&#34; title=&#34;Previous (arrow left)&#34;&gt;
     &lt;/button&gt;
     &lt;button class=&#34;pswp__button pswp__button--arrow--right&#34; title=&#34;Next (arrow right)&#34;&gt;
     &lt;/button&gt;
     &lt;div class=&#34;pswp__caption&#34;&gt;
       &lt;div class=&#34;pswp__caption__center&#34;&gt;&lt;/div&gt;
     &lt;/div&gt;
     &lt;/div&gt;
     &lt;/div&gt;
 &lt;/div&gt;
 

&lt;br&gt;&lt;/p&gt;
&lt;h5 id=&#34;project-type&#34;&gt;Project Type&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Personal Project&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;motivation&#34;&gt;Motivation&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.internationalwomensday.com&#34;&gt;International Women&amp;rsquo;s Day 2022&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;EuroStat shared &lt;a href=&#34;https://ec.europa.eu/eurostat/en/web/products-statistical-working-papers/-/ks-tc-22-002&#34;&gt;data set on gender pay gaps in the EU&lt;/a&gt; on &lt;a href=&#34;https://twitter.com/EU_Eurostat/status/1500755719796236288&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;design-choices&#34;&gt;Design Choices&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;dumbbell chart&lt;/strong&gt; to allow for direct comparison per country and across countries.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ranking&lt;/strong&gt; of countries by the pay gap in 2020 (original version; ranking by pay gap during the reference period as alternative version).&lt;/li&gt;
&lt;li&gt;A colorblind-safe &lt;strong&gt;traffic-light colors&lt;/strong&gt; for the three different trends: larger (red), stable (orange), and smaller (green) pay gap in 2020.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Chart title serves as axis title&lt;/strong&gt; as well.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;detailed legend&lt;/strong&gt; explaining the trend colors and dumbbell.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Annotations&lt;/strong&gt; to explicitly state the percentages and in addition the change plus explaining what the the abbreviations EU27 and EA19 represent.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Highlighting EU27 and EA19&lt;/strong&gt; as aggregated metrics by adding a grey box to them and using a different font with a higher weight of the same typeface (actually, it I use only one typeface in the chart!).&lt;/li&gt;
&lt;li&gt;To focus on the women, I wanted to show how much less the earning is compared to men. This becomes a bit tricky as the percentage is actually positive but shows a gap (it is &lt;em&gt;&amp;quot;+13 percentage points below&amp;quot;&lt;/em&gt;). In the end, I decided to flip the axis as it feels much more intuitive to me. By adding big axis text I guide the reader how to interpret the y axis.&lt;/li&gt;
&lt;li&gt;Unfortunately, I had to use the country abbreviations due to space issues. Long labels made the chart way too busy.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;data-source&#34;&gt;Data Source&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;EuroStat data set &lt;a href=&#34;https://ec.europa.eu/eurostat/databrowser/view/sdg_05_20/default/table?lang=en&#34;&gt;SDG_05_20 &amp;ldquo;Gender pay gap in unadjusted form&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;tools&#34;&gt;Tools&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Data Preparation: &lt;a href=&#34;https://dplyr.tidyverse.org/&#34;&gt;&lt;code&gt;{dplyr}&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://stringr.tidyverse.org/&#34;&gt;&lt;code&gt;{stringr}&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://sfirke.github.io/janitor/&#34;&gt;&lt;code&gt;{janitor}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Graphics: &lt;a href=&#34;https://ggplot2.tidyverse.org/&#34;&gt;&lt;code&gt;{ggplot2}&lt;/code&gt;&lt;/a&gt;; &lt;a href=&#34;https://wilkelab.org/ggtext/&#34;&gt;&lt;code&gt;{ggtext}&lt;/code&gt;&lt;/a&gt; for advanced text styling; &lt;a href=&#34;https://cran.r-project.org/web/packages/colorspace/vignettes/colorspace.html&#34;&gt;&lt;code&gt;{colorspace}&lt;/code&gt;&lt;/a&gt; for color manipulation; &lt;a href=&#34;https://ggrepel.slowkow.com/articles/examples.html&#34;&gt;&lt;code&gt;{ggrepel}&lt;/code&gt;&lt;/a&gt; for label positions in alternative slope chart&lt;/li&gt;
&lt;li&gt;Colors: Picked with &lt;a href=&#34;https://palettte.app/&#34;&gt;palettte.app&lt;/a&gt; and colorblind–tested with &lt;a href=&#34;https://projects.susielu.com/viz-palette?colors=%5B%22#B55951%22,%22#F0B48E%22,%22#669d8f%22%5D&amp;amp;backgroundColor=%22white%22&amp;amp;fontColor=%22black%22&amp;amp;mode=%22deuteranomaly%22&#34;&gt;Viz Palette&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/z3tt/45235c5a2ee0e03e61d03f8db710e3b7&#34;&gt;Code available for both the dumbbell and slope graph&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;methods&#34;&gt;Methods&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;For each country and the two aggregated groups, I summarized all years available in the period between 2002 and 2010 (as this was the period that covered all countries) as average. I also kept track of the sample size per group. Afterwards, I calculated the difference from the averaged reference value to the value in 2020.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/z3tt/45235c5a2ee0e03e61d03f8db710e3b7&#34;&gt;Plotting was done completely in R&lt;/a&gt; (for a list of packages see &amp;ldquo;Tools&amp;rdquo;).&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;alternative-versions&#34;&gt;Alternative Versions&lt;/h2&gt;
&lt;h5 id=&#34;slope-chart-x-time-series-hybrid&#34;&gt;Slope Chart x Time Series Hybrid&lt;/h5&gt;
&lt;img src=&#34;img/paygap-europe/paygap_eu_slope.jpg&#34; style=&#34;height: 100%; width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://www.cedricscherer.com/img/paygap-europe/paygap_eu_slope.jpg&#39;, &#39;blank&#39;);&#34;&gt;
&lt;h5 id=&#34;dumbbell-chart-sorted-by-pay-gap-20022010&#34;&gt;Dumbbell Chart sorted by Pay Gap 2002–2010&lt;/h5&gt;
&lt;img src=&#34;img/paygap-europe/paygap_eu_dumbbell_alt.jpg&#34; style=&#34;height: 100%; width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://www.cedricscherer.com/img/paygap-europe/paygap_eu_dumbbell_alt.jpg&#39;, &#39;blank&#39;);&#34;&gt;
&lt;h5 id=&#34;dumbbell-chart-for-all-countries-listed&#34;&gt;Dumbbell Chart for All Countries Listed&lt;/h5&gt;
&lt;img src=&#34;img/paygap-europe/paygap_all_dumbbell.jpg&#34; style=&#34;height: 100%; width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://www.cedricscherer.com/img/paygap-europe/paygap_eu_dumbbell_alt.jpg&#39;, &#39;blank&#39;);&#34;&gt;
</description>
    </item>
    
    <item>
      <title>paygap</title>
      <link>https://cedricscherer.com/tags/paygap/</link>
      <pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/paygap/</guid>
      <description></description>
    </item>
    
    <item>
      <title>maps</title>
      <link>https://cedricscherer.com/tags/maps/</link>
      <pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/maps/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The World&#39;s Countries Colored by Their First Letter</title>
      <link>https://cedricscherer.com/2021/08/27/the-worlds-countries-colored-by-their-first-letter/</link>
      <pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/2021/08/27/the-worlds-countries-colored-by-their-first-letter/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Next month, I am going to give a live training session for Pearson and O&amp;rsquo;Reilly called  “Hands-On Data Visualization with ggplot2”. For this course, I want to cover mapping with R and &lt;code&gt;{ggplot2}&lt;/code&gt; for the first time. While searching for a cool variable to illustrate how to create &lt;a href=&#34;https://www.data-to-viz.com/graph/choropleth.html&#34;&gt;choropleth maps&lt;/a&gt;, I came up with the idea to visualize name of each country. But not the full name—that would be too silly and not insightful at all—but the first letter of each country.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While drafting the first map, it quickly became obvious that mapping color to all 26 letters (or better 25 letters since there is no country starting with X) is not helpful at all. A quick search showed that there are a few colorful maps, struggling with the same problem (&lt;a href=&#34;https://www.reddit.com/r/Maps/comments/jfudnt/map_of_the_world_painted_according_to_the_first/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://www.reddit.com/r/mapporncirclejerk/comments/oujs8i/if_every_country_that_has_the_same_first_letter/&#34;&gt;here&lt;/a&gt;) or that do not permit to see the complete data by &lt;a href=&#34;http://alphabetpassport.com/world.png&#34;&gt;aggregating rare letters&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So I quickly came up to use small multiples, which would allow for an easy identification of all countries starting with a particular letter and the landmass covered by these countries. Thanks to &lt;code&gt;{ggplot2}&lt;/code&gt;’s facet functionality, it was super–easy to turn it into small multiples.&lt;/p&gt;
&lt;img src=&#34;img/world-by-letters/letter_world_poster.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;img/world-by-letters/letter_world_poster.png&#39;, &#39;blank&#39;);&#34;/&gt;
&lt;figcaption&gt;The final poster version with the colorful overview map and 25 small maps, one for each letter.&lt;/figcaption&gt;&lt;br&gt;
&lt;h5 id=&#34;project-type&#34;&gt;Project Type&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Personal Project&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;motivation&#34;&gt;Motivation&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Finding a cool variable in the NaturalEarth data set to visualize.&lt;/li&gt;
&lt;li&gt;Curiosity: Which letter covers the largest area, which are rare?&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;design-choices&#34;&gt;Design Choices&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Small multiples&lt;/strong&gt; to allow for direct access of single letters which allows also to add the area covered to each map.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;cyclical color palette&lt;/strong&gt;; of course, 25 categories are too many but with this approach one can at least identify the range a country falls into.  Color-vision deficiency problems are likely but not problematic thanks to the small multiples.&lt;/li&gt;
&lt;li&gt;I searched through a ton of fonts: I settled on &lt;a href=&#34;https://pangrampangram.com/products/hatton&#34;&gt;&lt;em&gt;Hatton&lt;/em&gt;&lt;/a&gt; for the title and letters and &lt;a href=&#34;https://www.omnibus-type.com/fonts/chivo/&#34;&gt;&lt;em&gt;Chivo&lt;/em&gt;&lt;/a&gt; with its tabular numbers for the areas and the caption.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;data-source&#34;&gt;Data Source&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.naturalearthdata.com/&#34;&gt;NaturalEarth&lt;/a&gt; for the country boundaries via the &lt;a href=&#34;https://docs.ropensci.org/rnaturalearthdata/&#34;&gt;&lt;code&gt;{rnaturalearth}&lt;/code&gt; R package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Country names from the &lt;a href=&#34;https://www.cia.gov/the-world-factbook/&#34;&gt;CIA World Factbook&lt;/a&gt;, contained in the world data set&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;tools&#34;&gt;Tools&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Data: &lt;a href=&#34;https://docs.ropensci.org/rnaturalearthdata/&#34;&gt;&lt;code&gt;{rnaturalearth}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Data Preparation: &lt;a href=&#34;https://dplyr.tidyverse.org/&#34;&gt;&lt;code&gt;{dplyr}&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://stringr.tidyverse.org/&#34;&gt;&lt;code&gt;{stringr}&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://r-spatial.github.io/sf/&#34;&gt;&lt;code&gt;{sf}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Graphics: &lt;a href=&#34;https://ggplot2.tidyverse.org/&#34;&gt;&lt;code&gt;{ggplot2}&lt;/code&gt;&lt;/a&gt;; &lt;a href=&#34;https://wilkelab.org/ggtext/&#34;&gt;&lt;code&gt;{ggtext}&lt;/code&gt;&lt;/a&gt; for title and caption; &lt;a href=&#34;https://patchwork.data-imaginist.com/&#34;&gt;&lt;code&gt;{patchwork}&lt;/code&gt;&lt;/a&gt; for plot composition&lt;/li&gt;
&lt;li&gt;Colors: &lt;a href=&#34;https://help.tableau.com/current/pro/desktop/en-us/formatting_create_custom_colors.htm&#34;&gt;Tableau cyclic color palette&lt;/a&gt; via the &lt;a href=&#34;https://jrnold.github.io/ggthemes/index.html&#34;&gt;&lt;code&gt;{ggthemes}&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;methods&#34;&gt;Methods&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;I had to choose one source for the names; after checking several naming conventions, I settled on those provided by the CIA World Factbook. Why? Because this was the easiest way to get rid of &amp;ldquo;Republic&amp;rdquo; and other prefixes and it has a pretty good coverage.&lt;/li&gt;
&lt;li&gt;For each country, I checked if a name is provided by the CIA world Factbook; if not, I used the sovereignty provided by NaturalEarth.&lt;/li&gt;
&lt;li&gt;For each country in the shape file, I extracted the first letter with the help of the &lt;a href=&#34;https://stringr.tidyverse.org/&#34;&gt;&lt;code&gt;{stringr}&lt;/code&gt; R package&lt;/a&gt; from the tidyverse.&lt;/li&gt;
&lt;li&gt;For each letter I calculated the area covered with the help of the &lt;a href=&#34;https://r-spatial.github.io/sf/&#34;&gt;&lt;code&gt;{sf}&lt;/code&gt; package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Plotting was done completely in R (for a list of packages see &amp;ldquo;Tools&amp;rdquo;).&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;alternative-versions&#34;&gt;Alternative Versions&lt;/h2&gt;
&lt;h5 id=&#34;single-version-of-the-small-multiples&#34;&gt;Single Version of the Small Multiples&lt;/h5&gt;
&lt;img src=&#34;img/world-by-letters/letter_world_facet_top.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://www.cedricscherer.com/img/world-by-letters/letter_world_facet_top.png&#39;, &#39;blank&#39;);&#34;&gt;
&lt;img src=&#34;img/world-by-letters/letter_world_facet_left.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://www.cedricscherer.com/img/world-by-letters/letter_world_facet_left.png&#39;, &#39;blank&#39;);&#34;&gt;
&lt;h5 id=&#34;single-version-of-the-overview-map&#34;&gt;Single Version of the Overview Map&lt;/h5&gt;
&lt;img src=&#34;img/world-by-letters/letter_world_v1.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://www.cedricscherer.com/img/world-by-letters/letter_world_v1.png&#39;, &#39;blank&#39;);&#34;&gt;
&lt;img src=&#34;img/world-by-letters/letter_world_v2.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://www.cedricscherer.com/img/world-by-letters/letter_world_v2.png&#39;, &#39;blank&#39;);&#34;&gt;
&lt;h2 id=&#34;how-about-the-last-letter&#34;&gt;How about the last letter?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/humeursdevictor&#34;&gt;Victor&lt;/a&gt; asked on Twitter if there is some interesting patterns when looking at the last letter of each country. I had no idea so I went ahead and mapped it. I had to make more assumptions here since several countries in the CIA World Factbook end e.g. with &amp;ldquo;, Republic of&amp;rdquo; or something wrapped into parentheses. I decided to remove these bits and pick the last letter of these adjusted CIA World Factbook names.&lt;/p&gt;
&lt;img src=&#34;img/world-by-letters/last_letter_world_poster.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://www.cedricscherer.com/img/world-by-letters/last_letter_world_poster.png&#39;, &#39;blank&#39;);&#34;&gt;
&lt;img src=&#34;img/world-by-letters/last_letter_world_v1.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://www.cedricscherer.com/img/world-by-letters/last_letter_world_v1.png&#39;, &#39;blank&#39;);&#34;&gt;
&lt;img src=&#34;img/world-by-letters/last_letter_world_facet_left.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://www.cedricscherer.com/img/world-by-letters/last_letter_world_facet_left.png&#39;, &#39;blank&#39;);&#34;&gt;
</description>
    </item>
    
    <item>
      <title>A Quick How-to on Labelling Bar Graphs in ggplot2</title>
      <link>https://cedricscherer.com/2021/07/05/a-quick-how-to-on-labelling-bar-graphs-in-ggplot2/</link>
      <pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/2021/07/05/a-quick-how-to-on-labelling-bar-graphs-in-ggplot2/</guid>
      <description>
&lt;script src=&#34;https://cedricscherer.com/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;table-of-content&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Table of Content&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#intro&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data&#34;&gt;Data Preparation with the &lt;code&gt;tidyverse&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dataviz&#34;&gt;Data Visualization with &lt;code&gt;ggplot2&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#how-to-1&#34;&gt;How to Calculate the Percentage Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-to-2&#34;&gt;How to Position the Percentage Labels Inside the Bars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-to-3&#34;&gt;How to Color the Bars Using Different Colors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#polish&#34;&gt;Polish Your Plot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#accessibility&#34;&gt;Alternatives Improving the Accessibility&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;intro&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Bar charts are likely the most common chart type out there and come in several varieties. Most notably, direct labels can increase accessibility of a bar graph and reduce the “chart junk” since grid lines, axis labels, and even axis titles become obsolete. Ordering your bar charts make sense in case the categorical value has no internal order and helps focusing on the largest and smallest groups. In addition, one can highlight specific bars with use of custom colors. It is pretty easy to improve your ggplot with a few lines of code. And this short tutorial shows you multiple ways how to do so.&lt;/p&gt;
&lt;p&gt;A few days ago, I got a request on some code creating bar charts with individual colors and percentage labels with the &lt;a href=&#34;https://ggplot2.tidyverse.org/&#34;&gt;&lt;code&gt;{ggplot2}&lt;/code&gt; package&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Watching your &lt;a href=&#34;https://www.youtube.com/watch?v=5KHvEXYtnOo&#34;&gt;webinar about ggplot2 on UseR Oslo YouTube Channel&lt;/a&gt;, I noticed some charts you made for a project called &lt;a href=&#34;https://www.kuendigung.org/studien/verbraucherumfrage-zur-zukunft-nach-der-krise/&#34;&gt;‘Survey on contract termination during the COVID-19 pandemic for kuendigung.org’&lt;/a&gt;.&lt;br&gt;&lt;br&gt;Because they have many interesting aesthetic features, I started looking for source code on your &lt;a href=&#34;https://github.com/z3tt&#34;&gt;GitHub repo&lt;/a&gt;, but I didn’t find anything. So, I kindly ask you if you can share the code you used to create those charts (or share its location), hoping that it is not copyrighted material.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&#34;https://www.kuendigung.org/downloads/studie/verbraucherumfrage-zur-zukunft-nach-der-krise/11_1_solidaritaet_erstattung_id_1.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain;&#34;&gt;
&lt;p&gt;
&lt;figcaption class=&#34;small&#34; align=&#34;center&#34; style=&#34;color:#8c8c8c;font-style:italic;&#34;&gt;
The simple bar chart I made for &lt;a href=&#34;https://www.kuendigung.org/studien/verbraucherumfrage-zur-zukunft-nach-der-krise/&#34;&gt;kuendigung.org&lt;/a&gt;. Note that this was a multiple choice question and thus the sum is larger than 100%.
&lt;/figcaption&gt;
&lt;/p&gt;
&lt;p&gt;Specifically, the main things of interest where:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;How to &lt;strong&gt;calculate the percentage values&lt;/strong&gt;?&lt;br&gt;(Did you use a &lt;code&gt;{ggplot2}&lt;/code&gt; function or calculate them manually?)&lt;/li&gt;
&lt;li&gt;How to &lt;strong&gt;position the percentage labels inside&lt;/strong&gt; the bars?&lt;/li&gt;
&lt;li&gt;How to &lt;strong&gt;color the bars&lt;/strong&gt; using different colors?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Unfortunately, the code is under lock but it’s a simple bar chart with some labels, so I will walk you through a short toy example using the manufacturers data set &lt;code&gt;mpg&lt;/code&gt; that comes with &lt;code&gt;{ggplot2}&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data Preparation with the tidyverse&lt;/h2&gt;
&lt;p&gt;First, let’s prepare the data for the bar chart. We are going to use the data from 2008 only and summarize the number of car model variants in the data per manufacturer. We also adjust the manufacturer labels and order them as they should appear in the final plot. Here are some notes on some of the functions used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;count()&lt;/code&gt; from the &lt;a href=&#34;https://dplyr.tidyverse.org/&#34;&gt;&lt;code&gt;{dplyr}&lt;/code&gt; package&lt;/a&gt; is a wrapper of &lt;code&gt;group_by(var) %&amp;gt;% summarize(n = n()))&lt;/code&gt;. It allows you to sort the values which is useful here because we want to order the bars based on their value in our visualization.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str_to_title()&lt;/code&gt; from the &lt;a href=&#34;https://stringr.tidyverse.org/&#34;&gt;&lt;code&gt;{stringr}&lt;/code&gt; package&lt;/a&gt; is a quick way to capitalize labels.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fct_lump()&lt;/code&gt;, &lt;code&gt;fct_inorder()&lt;/code&gt;, &lt;code&gt;fct_rev()&lt;/code&gt;, and &lt;code&gt;fct_relevel()&lt;/code&gt; are all from the &lt;a href=&#34;https://forcats.tidyverse.org/&#34;&gt;&lt;code&gt;{forcats}&lt;/code&gt; package&lt;/a&gt; that provides helpers for reordering factor levels.
&lt;ul&gt;
&lt;li&gt;First, we group all manufacturers together that do not belong to the top 10 with &lt;code&gt;fct_lump()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Since our data set is sorted in descending order thanks to &lt;code&gt;count()&lt;/code&gt;, we first order them by appearance with &lt;code&gt;fct_inorder()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Afterwards, we reverse them with &lt;code&gt;fct_rev()&lt;/code&gt;(so that the bar with the highest value is on top).&lt;/li&gt;
&lt;li&gt;Finally, we move the category “Other” to the end (as the first level) with &lt;code&gt;fct_relevel()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

mpg_sum &amp;lt;- mpg %&amp;gt;% 
  ## just use 2008 data
  dplyr::filter(year == 2008) %&amp;gt;%
  ## turn into lumped factors with capitalized names
  dplyr::mutate(
    manufacturer = stringr::str_to_title(manufacturer),
    manufacturer = forcats::fct_lump(manufacturer, n = 10)
  ) %&amp;gt;% 
  ## add counts
  dplyr::count(manufacturer, sort = TRUE) %&amp;gt;% 
  ## order factor levels by number, put &amp;quot;Other&amp;quot; to end
  dplyr::mutate(
    manufacturer = forcats::fct_rev(forcats::fct_inorder(manufacturer)),
    manufacturer = forcats::fct_relevel(manufacturer, &amp;quot;Other&amp;quot;, after = 0)
  )

mpg_sum&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 11 x 2
##    manufacturer     n
##    &amp;lt;fct&amp;gt;        &amp;lt;int&amp;gt;
##  1 Dodge           21
##  2 Toyota          14
##  3 Chevrolet       12
##  4 Volkswagen      11
##  5 Other           11
##  6 Ford            10
##  7 Audi             9
##  8 Hyundai          8
##  9 Subaru           8
## 10 Nissan           7
## 11 Jeep             6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s check if our factor reordering worked:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;levels(mpg_sum$manufacturer)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Other&amp;quot;      &amp;quot;Jeep&amp;quot;       &amp;quot;Nissan&amp;quot;     &amp;quot;Subaru&amp;quot;     &amp;quot;Hyundai&amp;quot;   
##  [6] &amp;quot;Audi&amp;quot;       &amp;quot;Ford&amp;quot;       &amp;quot;Volkswagen&amp;quot; &amp;quot;Chevrolet&amp;quot;  &amp;quot;Toyota&amp;quot;    
## [11] &amp;quot;Dodge&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Keep in mind that we have reversed the ordering since &lt;code&gt;{ggplot2}&lt;/code&gt; plots factors from bottom to top when being mapped to &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;dataviz&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data Visualization with ggplot2&lt;/h2&gt;
&lt;p&gt;First, let’s draw the basic bar chart using our aggregated and ordered data set called &lt;code&gt;mpg_sum&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mpg_sum, aes(x = n, y = manufacturer)) +
  ## draw bars
  geom_col(fill = &amp;quot;gray70&amp;quot;) +
  ## change plot appearance
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cedricscherer.com/post/2021-07-05_how-to-label-bar-graphs-in-ggplot2_files/figure-html/plot-bars-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;how-to-1&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;How to Calculate the Percentage Values&lt;/h5&gt;
&lt;p&gt;We can go both routes, either creating the labels first or on the fly. However, creating the bars and labels with the help of &lt;code&gt;geom_bar()&lt;/code&gt; and &lt;code&gt;stat_summary(geom = &#34;text&#34;)&lt;/code&gt; is a bit more difficult and I prefer to build a temporary data frame for that task. The benefit is that you always can control and check the output, i.e. the sorting of the factor and the formatting of the labels.&lt;/p&gt;
&lt;p&gt;Here are two ways how to quickly add the percentage labels to your data set. The percentage can be easily calculated by dividing the number of cars per manufacturer &lt;code&gt;n&lt;/code&gt; by the total number of cars &lt;code&gt;sum(n)&lt;/code&gt;, times 100. &lt;code&gt;sprintf()&lt;/code&gt; is a handy function to format text and variables. &lt;code&gt;sprintf()&lt;/code&gt; allows you to include for example leading spaces (not important here but useful for left-aligned labels) and zero digits (e.g. &lt;code&gt;12.0%&lt;/code&gt; instead of &lt;code&gt;12%&lt;/code&gt; which is useful here). The syntax is likely confusing for you because it relies on the C library of the same name. Here, we want to retrieve 4 characters in total, 1 of the to the right of the decimal. See &lt;a href=&#34;https://www.php.net/manual/en/function.sprintf.php&#34;&gt;here&lt;/a&gt; for more about the parameters one can use. Using &lt;code&gt;paste0&lt;/code&gt;, or alternatively the &lt;code&gt;glue()&lt;/code&gt; function from the &lt;a href=&#34;https://glue.tidyverse.org/&#34;&gt;&lt;code&gt;{glue}&lt;/code&gt; package&lt;/a&gt;, we add the percentage symbol to that number.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mpg_sum &amp;lt;- mpg_sum %&amp;gt;% 
  ## add percentage label with `sprintf()`
  dplyr::mutate(perc = paste0(sprintf(&amp;quot;%4.1f&amp;quot;, n / sum(n) * 100), &amp;quot;%&amp;quot;))

mpg_sum&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 11 x 3
##    manufacturer     n perc   
##    &amp;lt;fct&amp;gt;        &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;  
##  1 Dodge           21 &amp;quot;17.9%&amp;quot;
##  2 Toyota          14 &amp;quot;12.0%&amp;quot;
##  3 Chevrolet       12 &amp;quot;10.3%&amp;quot;
##  4 Volkswagen      11 &amp;quot; 9.4%&amp;quot;
##  5 Other           11 &amp;quot; 9.4%&amp;quot;
##  6 Ford            10 &amp;quot; 8.5%&amp;quot;
##  7 Audi             9 &amp;quot; 7.7%&amp;quot;
##  8 Hyundai          8 &amp;quot; 6.8%&amp;quot;
##  9 Subaru           8 &amp;quot; 6.8%&amp;quot;
## 10 Nissan           7 &amp;quot; 6.0%&amp;quot;
## 11 Jeep             6 &amp;quot; 5.1%&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One could also use the &lt;code&gt;percent()&lt;/code&gt; function from the &lt;code&gt;{scales}&lt;/code&gt; package. The accuracy determines the number of digits (here &lt;code&gt;.1&lt;/code&gt;) and we can similarly add the leading white space by setting &lt;code&gt;trim&lt;/code&gt; to &lt;code&gt;FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mpg_sum %&amp;gt;% 
  ## add percentage label with `scales::percent()`
  dplyr::mutate(perc = scales::percent(n / sum(n), accuracy = .1, trim = FALSE))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 11 x 3
##    manufacturer     n perc   
##    &amp;lt;fct&amp;gt;        &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;  
##  1 Dodge           21 &amp;quot;17.9%&amp;quot;
##  2 Toyota          14 &amp;quot;12.0%&amp;quot;
##  3 Chevrolet       12 &amp;quot;10.3%&amp;quot;
##  4 Volkswagen      11 &amp;quot; 9.4%&amp;quot;
##  5 Other           11 &amp;quot; 9.4%&amp;quot;
##  6 Ford            10 &amp;quot; 8.5%&amp;quot;
##  7 Audi             9 &amp;quot; 7.7%&amp;quot;
##  8 Hyundai          8 &amp;quot; 6.8%&amp;quot;
##  9 Subaru           8 &amp;quot; 6.8%&amp;quot;
## 10 Nissan           7 &amp;quot; 6.0%&amp;quot;
## 11 Jeep             6 &amp;quot; 5.1%&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So let’s add the prepared percentage label to our bar graph with &lt;code&gt;geom_text()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mpg_sum, aes(x = n, y = manufacturer)) +
  geom_col(fill = &amp;quot;gray70&amp;quot;) +
  ## add percentage labels
  geom_text(aes(label = perc)) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cedricscherer.com/post/2021-07-05_how-to-label-bar-graphs-in-ggplot2_files/figure-html/plot-bars-with-labels-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And in case you want to add some more description to one of the bars, you can use an &lt;code&gt;if_else()&lt;/code&gt; (or an &lt;code&gt;ifelse()&lt;/code&gt;) statement like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mpg_sum &amp;lt;- mpg_sum %&amp;gt;% 
  dplyr::mutate(
    perc = paste0(sprintf(&amp;quot;%4.1f&amp;quot;, n / sum(n) * 100), &amp;quot;%&amp;quot;),
    ## customize label for the first category
    perc = if_else(row_number() == 1, paste(perc, &amp;quot;of all car models&amp;quot;), perc)
  )

ggplot(mpg_sum, aes(x = n, y = manufacturer)) +
  geom_col(fill = &amp;quot;gray70&amp;quot;) +
  geom_text(aes(label = perc)) +
  ## make sure labels doesn&amp;#39;t get cut
  scale_x_continuous(limits = c(NA, 24)) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cedricscherer.com/post/2021-07-05_how-to-label-bar-graphs-in-ggplot2_files/figure-html/perc-label-custom-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To illustrate how to create and place the labels on the fly, here is an example with labels showing counts per manufacturer (with percentage labels it gets a bit more complicated). We use &lt;code&gt;geom_bar()&lt;/code&gt; instead of &lt;code&gt;geom_col()&lt;/code&gt; which takes not two but only one variable and calculates counts by default. To add the labels, we again use &lt;code&gt;geom_text()&lt;/code&gt; but this time we overwrite the default statistical transformation &lt;code&gt;stat = &#34;identity&#34;&lt;/code&gt; with &lt;code&gt;stat = &#34;count&#34;&lt;/code&gt; (the same as the default for &lt;code&gt;geom_bar()&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## prepare non-aggregated data set with lumped and ordered factors
mpg_fct &amp;lt;- mpg %&amp;gt;% 
  dplyr::filter(year == 2008) %&amp;gt;%
  dplyr::mutate(
    ## add count to calculate percentages later
    total = dplyr::n(),
    ## turn into lumped factors with capitalized names
    manufacturer = stringr::str_to_title(manufacturer),
    manufacturer = forcats::fct_lump(manufacturer, n = 10),
    ## order factor levels by number, put &amp;quot;Other&amp;quot; to end
    manufacturer = forcats::fct_rev(forcats::fct_infreq(manufacturer)),
    manufacturer = forcats::fct_relevel(manufacturer, &amp;quot;Other&amp;quot;, after = 0)
  )
  
ggplot(mpg_fct, aes(x = manufacturer)) +
  geom_bar(fill = &amp;quot;gray70&amp;quot;) +
  ## add count labels
  geom_text(
    stat = &amp;quot;count&amp;quot;,
    aes(label = ..count..)
  ) +
  ## rotate plot
  coord_flip()  +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cedricscherer.com/post/2021-07-05_how-to-label-bar-graphs-in-ggplot2_files/figure-html/plot-bars-summary-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the default settings of &lt;code&gt;geom_text()&lt;/code&gt; place the labels exactly on the border. To make it look good, we need to adjust the positioning of the labels. So let’s move on to the next question!&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;how-to-2&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;How to Position the Percentage Labels Inside the Bars&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;geom_text()&lt;/code&gt; function comes with arguments that help you to align and position text labels:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hjust&lt;/code&gt; and &lt;code&gt;vjust&lt;/code&gt;: the horizontal and vertical justification to align text.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nudge_x&lt;/code&gt; and &lt;code&gt;nudge_y&lt;/code&gt;: the horizontal and vertical adjustment to offset text from points.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To put the labels inside, we first need to right-align the labels with &lt;code&gt;hjust = 1&lt;/code&gt;. We also add some negative horizontal adjustment via &lt;code&gt;nudge_x = -.5&lt;/code&gt; to add some spacing between the end of the bar and the label.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mpg_sum, aes(x = n, y = manufacturer)) +
  geom_col(fill = &amp;quot;gray70&amp;quot;) +
  geom_text(
    aes(label = perc), 
    ## make labels left-aligned
    hjust = 1, nudge_x = -.5
  ) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cedricscherer.com/post/2021-07-05_how-to-label-bar-graphs-in-ggplot2_files/figure-html/plot-bars-labels-inside-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In case you want to put the next to the bars, you often need to adjust the plot margin and/or the limits to avoid that the labels are cut off. The drawback of using limits is that you have to define them manually. Thus, I prefer to use the first approach. You can make sure that labels are not truncated by the panel by adding &lt;code&gt;clip = &#34;off&#34;&lt;/code&gt; to any coordinate system.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
💁 &lt;i&gt;Expand to see examples with labels next to the bars.&lt;/i&gt;
&lt;/summary&gt;
&lt;p&gt;Increase space on the right via &lt;code&gt;theme(plot.margin)&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mpg_sum, aes(x = n, y = manufacturer)) +
  geom_col(fill = &amp;quot;gray70&amp;quot;) +
  geom_text(
    aes(label = perc), 
    hjust = 0, nudge_x = .5
  ) +
  ## make sure labels doesn&amp;#39;t get cut, part 1
  coord_cartesian(clip = &amp;quot;off&amp;quot;) +
  theme_minimal() +
  ## make sure labels doesn&amp;#39;t get cut, part 2
  theme(plot.margin = margin(r = 120))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cedricscherer.com/post/2021-07-05_how-to-label-bar-graphs-in-ggplot2_files/figure-html/plot-bars-labels-outside-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Increase space on the right via &lt;code&gt;scale_x_continuous(limits)&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mpg_sum, aes(x = n, y = manufacturer)) +
  geom_col(fill = &amp;quot;gray70&amp;quot;) +
  geom_text(
    aes(label = perc), 
    hjust = 0, nudge_x = .5
  ) +
  ## make sure labels doesn&amp;#39;t get cut
  scale_x_continuous(limits = c(NA, 30)) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://cedricscherer.com/post/2021-07-05_how-to-label-bar-graphs-in-ggplot2_files/figure-html/plot-bars-labels-outside-2-1.png&#34; width=&#34;672&#34; /&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;how-to-3&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;How to Color the Bars Using Different Colors&lt;/h5&gt;
&lt;p&gt;Again, there are many ways how to add custom colors. As the first approach, we create the color palette as a vector based on our summarized data set. Let’s pick some colors that are similar to the original plot we started with:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## create color palette based on input data
pal &amp;lt;- c(
  &amp;quot;gray85&amp;quot;,
  rep(&amp;quot;gray70&amp;quot;, length(mpg_sum$manufacturer) - 4), 
  &amp;quot;coral2&amp;quot;, &amp;quot;mediumpurple1&amp;quot;, &amp;quot;goldenrod1&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this approach, we create a vector that holds the colors for each of the levels—from the lowest bar to the bar with the most values.
We can use the &lt;code&gt;length&lt;/code&gt; of the manufacturer column for all non-highlighted bars and subtract the number of bars we want to highlight. Here, we have a colorful top 3 and a lighter “Other” category. The vector can then be used in combination with &lt;code&gt;scale_color|fill_manual()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, we can use the custom palette to color each bar by mapping &lt;code&gt;manufacturer&lt;/code&gt; to the bar’s &lt;code&gt;fill&lt;/code&gt; property and by passing the &lt;code&gt;pals&lt;/code&gt; vector to &lt;code&gt;scale_fill_manual()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mpg_sum, aes(x = n, y = manufacturer, 
                    fill = manufacturer)) +
  geom_col() +
  geom_text(
    aes(label = perc), 
    hjust = 1, nudge_x = -.5
  ) +
  ## add custom colors
  scale_fill_manual(values = pal, guide = &amp;quot;none&amp;quot;) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cedricscherer.com/post/2021-07-05_how-to-label-bar-graphs-in-ggplot2_files/figure-html/plot-color-manual-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;One could also add the color to the data set and map the fill to that column and use &lt;code&gt;scale_fill_identity()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mpg_sum &amp;lt;-
  mpg_sum %&amp;gt;% 
  mutate(
    color = case_when(
      row_number() == 1 ~ &amp;quot;goldenrod1&amp;quot;,
      row_number() == 2 ~ &amp;quot;mediumpurple1&amp;quot;,
      row_number() == 3 ~ &amp;quot;coral2&amp;quot;,
      manufacturer == &amp;quot;Other&amp;quot; ~ &amp;quot;gray85&amp;quot;,
      ## all others should be gray
      TRUE ~ &amp;quot;gray70&amp;quot;
    )
  )

ggplot(mpg_sum, aes(x = n, y = manufacturer, fill = color)) +
  geom_col() +
  geom_text(
    aes(label = perc), 
    hjust = 1, nudge_x = -.5
  ) +
  ## add custom colors
  scale_fill_identity(guide = &amp;quot;none&amp;quot;) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cedricscherer.com/post/2021-07-05_how-to-label-bar-graphs-in-ggplot2_files/figure-html/palette-as-col-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This approach is less error-prone since the color is tied to the properties of the data. Thus, in case we update the data, the colors are still applied correctly.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
💁 &lt;i&gt;Expand to see that it still works with “updated” data.&lt;/code&gt;&lt;/i&gt;
&lt;/summary&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mpg %&amp;gt;% 
  ## use 1999 data now
  dplyr::filter(year == 1999) %&amp;gt;%
  dplyr::mutate(
    manufacturer = stringr::str_to_title(manufacturer),
    manufacturer = forcats::fct_lump(manufacturer, n = 10)
  ) %&amp;gt;% 
  dplyr::count(manufacturer, sort = TRUE) %&amp;gt;% 
  dplyr::mutate(
    manufacturer = forcats::fct_rev(forcats::fct_inorder(manufacturer)),
    manufacturer = forcats::fct_relevel(manufacturer, &amp;quot;Other&amp;quot;, after = 0),
    perc = paste0(sprintf(&amp;quot;%4.1f&amp;quot;, n / sum(n) * 100), &amp;quot;%&amp;quot;),
    perc = if_else(row_number() == 1, paste(perc, &amp;quot;of all car models&amp;quot;), perc),
    color = case_when(
      row_number() == 1 ~ &amp;quot;goldenrod1&amp;quot;,
      row_number() == 2 ~ &amp;quot;mediumpurple1&amp;quot;,
      row_number() == 3 ~ &amp;quot;coral2&amp;quot;,
      manufacturer == &amp;quot;Other&amp;quot; ~ &amp;quot;gray85&amp;quot;,
      TRUE ~ &amp;quot;gray70&amp;quot;
    )
  ) %&amp;gt;% 
  ggplot(aes(x = n, y = manufacturer, fill = color)) +
  geom_col() +
  geom_text(
    aes(label = perc), 
    hjust = 1, nudge_x = -.5
  ) +
  scale_fill_identity(guide = &amp;quot;none&amp;quot;) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://cedricscherer.com/post/2021-07-05_how-to-label-bar-graphs-in-ggplot2_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;
&lt;/details&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;polish&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Polish Your Plot&lt;/h5&gt;
&lt;p&gt;Finally, we can adjust the visual appearance a bit, most importantly reduce redundancy. Since I only want to keep the labels on the y axis, I use &lt;code&gt;theme_void()&lt;/code&gt; and add the axis text afterwards again. Here, I use a custom font for both the axis text and the percentage labels and adjust the font size. (I am not going to cover it here but in case you want to include custom fonts, check the &lt;a href=&#34;https://github.com/r-lib/systemfonts&#34;&gt;&lt;code&gt;{systemfonts}&lt;/code&gt; package&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;By default, &lt;code&gt;{ggplot2}&lt;/code&gt; adds some padding to each axis which results in labels that are a bit off. To decrease the distance between the y axis text and the bars, adjust the expansion argument &lt;code&gt;expand&lt;/code&gt; in the according scale, here &lt;code&gt;scale_x_continuous()&lt;/code&gt;. I also add some white space around the plot by setting a &lt;code&gt;plot.margin&lt;/code&gt; which is of type &lt;code&gt;element_rect()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mpg_sum, aes(x = n, y = manufacturer, fill = color)) +
  geom_col() +
  geom_text(
    aes(label = perc), 
    hjust = 1, nudge_x = -.5,
    size = 4, fontface = &amp;quot;bold&amp;quot;, family = &amp;quot;Fira Sans&amp;quot;
  ) +
  ## reduce spacing between labels and bars
  scale_x_continuous(expand = c(.01, .01)) +
  scale_fill_identity(guide = &amp;quot;none&amp;quot;) +
  ## get rid of all elements except y axis labels + adjust plot margin
  theme_void() +
  theme(axis.text.y = element_text(size = 14, hjust = 1, family = &amp;quot;Fira Sans&amp;quot;),
        plot.margin = margin(rep(15, 4)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cedricscherer.com/post/2021-07-05_how-to-label-bar-graphs-in-ggplot2_files/figure-html/full-plot-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can find the full code to create the final plot in this &lt;a href=&#34;https://gist.github.com/z3tt/7bc5d9822a7fff409085073c601f29d5&#34;&gt;gist&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;accessibility&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Alternatives Improving the Accessibility&lt;/h5&gt;
&lt;p&gt;&lt;em&gt;Update:&lt;/em&gt; Some feedback suggested that placing labels inside the bars can hinder accessibility due to contrast issues. I fully agree, so I want to present some approaches to decrease that barrier without the need to increase the white space towards the right when placing labels next to the bars.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version with label boxes instead of pure text:&lt;/strong&gt;&lt;br /&gt;
We can replace &lt;code&gt;geom_text()&lt;/code&gt; with &lt;code&gt;geom_label()&lt;/code&gt; which adds a box around each label. While it doesn’t look as good, the high contrast of black labels on white ground maximizes readability.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(mpg_sum, aes(x = n, y = manufacturer, fill = color)) +
  geom_col() +
  geom_label(
    aes(label = perc), 
    hjust = 1, nudge_x = -.5,
    size = 4, fontface = &amp;quot;bold&amp;quot;, family = &amp;quot;Fira Sans&amp;quot;,
    ## turn into white box without outline
    fill = &amp;quot;white&amp;quot;, label.size = 0
  ) +
  scale_x_continuous(expand = c(.01, .01)) +
  scale_fill_identity(guide = &amp;quot;none&amp;quot;) +
  theme_void() +
  theme(
    axis.text.y = element_text(size = 14, hjust = 1, family = &amp;quot;Fira Sans&amp;quot;),
    plot.margin = margin(rep(15, 4))
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cedricscherer.com/post/2021-07-05_how-to-label-bar-graphs-in-ggplot2_files/figure-html/plot-bars-geom-label-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version with different label placement:&lt;/strong&gt;
I like the idea of placing only those labels inside that mess up the aspect ratio due to their length. In our case, that’s only the first entry. We can place the labels differently by mapping a new created column &lt;code&gt;place&lt;/code&gt; to the &lt;code&gt;hjust&lt;/code&gt; argument. Since we cannot map a variable to &lt;code&gt;nudge_x&lt;/code&gt;, we cannot use it to offset the labels. To add some spacing, I simply add some white space to the begin and end of each percentage label.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mpg_sum %&amp;gt;% 
  mutate(
    ## set justification based on data 
    ## so that only the first label is placed inside
    place = if_else(row_number() == 1, 1, 0),
    ## add some spacing to labels since we cant use nudge_x anymore
    perc = paste(&amp;quot; &amp;quot;, perc, &amp;quot; &amp;quot;)
  ) %&amp;gt;% 
  ggplot(aes(x = n, y = manufacturer, fill = color)) +
  geom_col() +
  geom_text(
    aes(label = perc, hjust = place), 
    size = 4, fontface = &amp;quot;bold&amp;quot;, family = &amp;quot;Fira Sans&amp;quot;
  ) +
  scale_x_continuous(expand = c(.01, .01)) +
  scale_fill_identity(guide = &amp;quot;none&amp;quot;) +
  theme_void() +
  theme(
    axis.text.y = element_text(size = 14, hjust = 1, family = &amp;quot;Fira Sans&amp;quot;),
    plot.margin = margin(rep(15, 4))
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cedricscherer.com/post/2021-07-05_how-to-label-bar-graphs-in-ggplot2_files/figure-html/plot-bars-alternating-labs-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version placing the long label not at the top:&lt;/strong&gt;
We could also add the “of all car models” bit to a bar that is short enough to ensure that the label does not extend beyond the usual width of the plot. In our example, the second bar in our case fulfills this condition:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mpg_sum %&amp;gt;% 
  ## overwrite old percentage labels
  mutate(
    perc = paste0(sprintf(&amp;quot;%4.1f&amp;quot;, n / sum(n) * 100), &amp;quot;%&amp;quot;),
    perc = if_else(row_number() == 2, paste(perc, &amp;quot;of all car models&amp;quot;), perc)
  ) %&amp;gt;% 
  ggplot(aes(x = n, y = manufacturer, fill = color)) +
  geom_col() +
  geom_text(
    aes(label = perc,), 
    hjust = 0, nudge_x = .5,
    size = 4, fontface = &amp;quot;bold&amp;quot;, family = &amp;quot;Fira Sans&amp;quot;
  ) +
  ## make sure labels doesn&amp;#39;t get cut, part 1
  coord_cartesian(clip = &amp;quot;off&amp;quot;) +
  scale_x_continuous(expand = c(.01, .01)) +
  scale_fill_identity(guide = &amp;quot;none&amp;quot;) +
  theme_void() +
  theme(
    axis.text.y = element_text(size = 14, hjust = 1, family = &amp;quot;Fira Sans&amp;quot;),
    ## make sure labels doesn&amp;#39;t get cut, part 2
    plot.margin = margin(15, 30, 15, 15)
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://cedricscherer.com/post/2021-07-05_how-to-label-bar-graphs-in-ggplot2_files/figure-html/plot-bars-lab-2nd-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Of course, you could add that information also to the title, figure caption or simply leave it out. But that’s not what the request was about 🤷&lt;/p&gt;
&lt;details&gt;
&lt;summary style=&#34;font-size:10pt;&#34;&gt;
R Session Info
&lt;/summary&gt;
&lt;pre&gt;&lt;code&gt;## R version 4.1.2 (2021-11-01)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 19043)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=German_Germany.1252  LC_CTYPE=German_Germany.1252   
## [3] LC_MONETARY=German_Germany.1252 LC_NUMERIC=C                   
## [5] LC_TIME=German_Germany.1252    
## system code page: 65001
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
##  [1] forcats_0.5.1     stringr_1.4.0     dplyr_1.0.7       purrr_0.3.4      
##  [5] readr_2.0.2       tidyr_1.1.4       tibble_3.1.6      ggplot2_3.3.5    
##  [9] tidyverse_1.3.1   systemfonts_1.0.3
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_1.0.7        lubridate_1.8.0   assertthat_0.2.1  digest_0.6.29    
##  [5] utf8_1.2.2        R6_2.5.1          cellranger_1.1.0  backports_1.2.1  
##  [9] reprex_2.0.1      evaluate_0.14     highr_0.9         httr_1.4.2       
## [13] blogdown_1.6      pillar_1.6.4      rlang_0.4.12      readxl_1.3.1     
## [17] rstudioapi_0.13   jquerylib_0.1.4   rmarkdown_2.11    labeling_0.4.2   
## [21] textshaping_0.3.6 munsell_0.5.0     broom_0.7.11      compiler_4.1.2   
## [25] modelr_0.1.8      xfun_0.27         pkgconfig_2.0.3   htmltools_0.5.2  
## [29] tidyselect_1.1.1  bookdown_0.24     fansi_0.5.0       crayon_1.4.2     
## [33] tzdb_0.1.2        dbplyr_2.1.1      withr_2.4.3       grid_4.1.2       
## [37] jsonlite_1.7.2    gtable_0.3.0      lifecycle_1.0.1   DBI_1.1.2        
## [41] magrittr_2.0.1    scales_1.1.1      cli_3.1.0         stringi_1.7.5    
## [45] farver_2.1.0      fs_1.5.0          xml2_1.3.2        bslib_0.3.1      
## [49] ellipsis_0.3.2    ragg_1.1.3        generics_0.1.1    vctrs_0.3.8      
## [53] tools_4.1.2       glue_1.4.2        hms_1.1.1         fastmap_1.1.0    
## [57] yaml_2.2.1        colorspace_2.0-2  rvest_1.0.2       knitr_1.36       
## [61] haven_2.4.3       sass_0.4.0&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Annotations</title>
      <link>https://cedricscherer.com/tags/annotations/</link>
      <pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/annotations/</guid>
      <description></description>
    </item>
    
    <item>
      <title>R</title>
      <link>https://cedricscherer.com/tags/r/</link>
      <pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/r/</guid>
      <description></description>
    </item>
    
    <item>
      <title>tidyverse</title>
      <link>https://cedricscherer.com/tags/tidyverse/</link>
      <pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/tidyverse/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
