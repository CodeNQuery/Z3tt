<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cédric Scherer</title>
    <link>https://cedricscherer.com/</link>
    <description>Recent content on Cédric Scherer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://cedricscherer.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>automation</title>
      <link>https://cedricscherer.com/tags/automation/</link>
      <pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/automation/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Cédric Scherer</title>
      <link>https://cedricscherer.com/</link>
      <pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/</guid>
      <description></description>
    </item>
    
    <item>
      <title>DataViz</title>
      <link>https://cedricscherer.com/tags/dataviz/</link>
      <pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/dataviz/</guid>
      <description></description>
    </item>
    
    <item>
      <title>efficiency</title>
      <link>https://cedricscherer.com/tags/efficiency/</link>
      <pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/efficiency/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Efficiency and Consistency: Automate Subset Graphics with ggplot2 and purrr</title>
      <link>https://cedricscherer.com/2023/07/05/efficiency-and-consistency-automate-subset-graphics-with-ggplot2-and-purrr/</link>
      <pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/2023/07/05/efficiency-and-consistency-automate-subset-graphics-with-ggplot2-and-purrr/</guid>
      <description>


&lt;p style=&#34;font-size:14px&#34;&gt;
Header image by &lt;a href=&#39;https://www.youtube.com/watch?v=kLvZUXtVXQ0&#39; target=&#34;_blank&#34;&gt;Purrple Cat&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;During a consulting session a few weeks ago, we discussed automated plot generation with &lt;code&gt;{ggplot2}&lt;/code&gt;. What does that mean? If you have a bunch of variables, you may want to create a set of explorative charts for different variables.
Or you may want to create a set of explanatory charts, one for each category of your data set. For both use cases, this requires redundant work as the plots use &lt;em&gt;almost&lt;/em&gt; the same code to generate the visualizations.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Instead of copying and pasting the same code and adjusting the variables, iterate over a vector of groups (variables, categories, numeric ranges) to generate the same visual for different data sets by using a custom function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are several use cases why you may want to use a functional programming approach to generate the same chart for different data subsets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;explore distributions or relationships of different variables&lt;/li&gt;
&lt;li&gt;communicate results for different groups&lt;/li&gt;
&lt;li&gt;generate charts for custom reports using various data (sub)sets&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is a great &lt;a href=&#34;https://aosmith.rbind.io/2018/08/20/automating-exploratory-plots/&#34; target=&#34;_blank&#34;&gt;blogpost by Ariel Muldoon on automating explorative plots&lt;/a&gt; by iterating over different variables. This blog post here focuses more on the generation of polished charts to visualize subsets of the same data set. In the end, I will also share some &lt;a href=&#34;#variables&#34;&gt;examples for working with variables&lt;/a&gt; and some &lt;a href=&#34;#shortcuts&#34;&gt;shortcuts for exploring data sets visually&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;table-of-content&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Table of Content&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#setup&#34;&gt;The Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#case&#34;&gt;The Use Case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#function&#34;&gt;The Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#automation&#34;&gt;The Automation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#complex&#34;&gt;A More Complex Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#variables&#34;&gt;An Example with Variables as Inputs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;setup&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Setup&lt;/h2&gt;
&lt;p&gt;We are going to visualize relationships for different numeric variables of the &lt;code&gt;mpg&lt;/code&gt; data set which features fuel economy data of popular car models for different years, manufacturers, and car types. In this tutorial, we are using only data from 2008.&lt;/p&gt;
&lt;p&gt;For some data-wrangling steps, we make use of the &lt;code&gt;{dplyr}&lt;/code&gt; packages. To visualize the data, we use the packages &lt;code&gt;{ggplot2}&lt;/code&gt; and &lt;code&gt;{patchwork}&lt;/code&gt;. We will also use some functions of other packages, namely &lt;code&gt;{tidyr}&lt;/code&gt;, &lt;code&gt;{stringr}&lt;/code&gt;, &lt;code&gt;{prismatic}&lt;/code&gt; and &lt;code&gt;{ggforce}&lt;/code&gt; which we address via the namespace.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Unfold to explore setup steps
&lt;/summary&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)   ## for plotting
library(purrr)     ## for iterative tasks
library(dplyr)     ## for data wrangling
library(patchwork) ## for multi-panel plots

## customize plot style
theme_set(theme_minimal(base_size = 15, base_family = &amp;quot;Anybody&amp;quot;))
theme_update(
  axis.title.x = element_text(margin = margin(12, 0, 0, 0), color = &amp;quot;grey30&amp;quot;),
  axis.title.y = element_text(margin = margin(0, 12, 0, 0), color = &amp;quot;grey30&amp;quot;),
  panel.grid.minor = element_blank(),
  panel.border = element_rect(color = &amp;quot;grey45&amp;quot;, fill = NA, linewidth = 1.5),
  panel.spacing = unit(.9, &amp;quot;lines&amp;quot;),
  strip.text = element_text(size = rel(1)),
  plot.title = element_text(size = rel(1.4), face = &amp;quot;bold&amp;quot;, hjust = .5),
  plot.title.position = &amp;quot;plot&amp;quot;
)

## adjust data set
mpg &amp;lt;-
  ggplot2::mpg %&amp;gt;% 
  filter(year == 2008) %&amp;gt;% 
  mutate(manufacturer = stringr::str_to_title(manufacturer))&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;div id=&#34;case&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Use Case&lt;/h2&gt;
&lt;p&gt;Let’s visualize the 2008 car fuel data and explore the relationship of displacement and highway miles per gallon per manufacturer.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;g &amp;lt;- 
  ggplot(mpg, aes(x = hwy, y = displ)) +
  scale_x_continuous(breaks = 2:8*5) +
  labs(x = &amp;quot;Highway miles per gallon&amp;quot;, y = &amp;quot;Displacement in litres&amp;quot;, color = NULL)

g + geom_point(aes(color = manufacturer), alpha = .5, size = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://cedricscherer.com/post/2023-07-07-automate-plotting-ggplot-purrr_files/figure-html/scatter-all-color-1.png&#34; width=&#34;768&#34; /&gt;
&lt;figcaption&gt;
A (too) colorful scatterplot of displacement versus highway miles per gallon with points colored by manufacturer.
&lt;/figcaption&gt;
&lt;p&gt;Two issues arise here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;too many categories:&lt;/strong&gt; the use of color encoding is not useful given the large number of manufacturers (a usual recommended limit of categorical colors is 5-8)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;too many data points:&lt;/strong&gt; the number of observations, especially with identical value combinations, leads to* overplotting and color mixing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A common solution to circumvent these issues are small multiples:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt; g + 
  geom_point(alpha = .5, size = 2) +
  facet_wrap(~ manufacturer, ncol = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://cedricscherer.com/post/2023-07-07-automate-plotting-ggplot-purrr_files/figure-html/scatter-facet-1.png&#34; width=&#34;960&#34; /&gt;
&lt;figcaption&gt;
Small multiples visualizing the relationship of displacement versus highway miles per gallon per manufaturer as a grid of scatter plots.
&lt;/figcaption&gt;
&lt;p&gt;While it solves the mentioned issues, the resulting small multiple is likely too dense to effectively communicate the relationships for each manufacturer. Due to the large number of manufacturers, each plot also becomes rather small.&lt;/p&gt;
&lt;p&gt;To focus on a single manufacturer, we may decide to create a plot for a subset of the data. To allow for comparison, we also plot all other car models as smaller, grey circles.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;g +
  ## filter for manufacturer of interest
  geom_point(data = filter(mpg, manufacturer == &amp;quot;Audi&amp;quot;), 
             color = &amp;quot;#007cb1&amp;quot;, alpha = .5, size = 4) +
  ## add shaded points for other data
  geom_point(data = filter(mpg, manufacturer != &amp;quot;Audi&amp;quot;), 
             shape = 1, color = &amp;quot;grey45&amp;quot;, size = 2) +
  ## add title manually
  ggtitle(&amp;quot;Audi&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://cedricscherer.com/post/2023-07-07-automate-plotting-ggplot-purrr_files/figure-html/scatter-single-audi-1.png&#34; width=&#34;672&#34; /&gt;
&lt;figcaption&gt;
A scatterplot highlighting the car models manufactured by Audi. The grey circles represent all other car models featured in the data set.
&lt;/figcaption&gt;
&lt;p&gt;To communicate the relationship for all manufacturers, e.g. a dedicated section for each in a report or revealing the results step by step in a presentation, we now need to repeat the same code 15 times and replace the filter conditions and title. Or we iterate the process.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;function&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Function&lt;/h2&gt;
&lt;p&gt;The first step is to create a custom function that takes the subset condition as an input and creates the plot with the filtered data. The code inside the user-defined function below is basically the same as the one to create the Audi chart. The only difference is that we do not specify Audi but create a placeholder, here called &lt;code&gt;group&lt;/code&gt;, to control the filtering condition and title: In the &lt;code&gt;geom_point()&lt;/code&gt; calls, we subset our data based on &lt;code&gt;group&lt;/code&gt;; in the &lt;code&gt;labs()&lt;/code&gt; function we use this string as the plot title.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_manufacturer &amp;lt;- function(group) {
  
  ## check if input is valid
  if (!group %in% mpg$manufacturer) stop(&amp;quot;Manufacturer not listed in the data set.&amp;quot;)
  
  ggplot(mapping = aes(x = hwy, y = displ)) +
    ## filter for manufacturer of interest
    geom_point(data = filter(mpg, manufacturer %in% group), 
               color = &amp;quot;#007cb1&amp;quot;, alpha = .5, size = 4) +
    ## add shaded points for other data
    geom_point(data = filter(mpg, !manufacturer %in% group), 
               shape = 1, color = &amp;quot;grey45&amp;quot;, size = 2) +
    scale_x_continuous(breaks = 2:8*5) +
    ## add title automatically based on subset choice
    labs(x = &amp;quot;Highway gallons&amp;quot;, y = &amp;quot;Displacement&amp;quot;, 
         title = group, color = NULL)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can run the function manually for each manufacturer featured in the data set:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## run function for specific subsets
plot_manufacturer(&amp;quot;Audi&amp;quot;)
plot_manufacturer(&amp;quot;Chevrolet&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://cedricscherer.com/post/2023-07-07-automate-plotting-ggplot-purrr_files/figure-html/run-function-scatter-highlight-plot-1.png&#34; width=&#34;1152&#34; /&gt;
&lt;figcaption&gt;
Using the custom function, we can create plots for specific manufacturers without the need to copy-paste and adjust the ggplot code manually.
&lt;/figcaption&gt;
&lt;/div&gt;
&lt;div id=&#34;automation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Automation&lt;/h2&gt;
&lt;p&gt;The final step is simple: we use the &lt;code&gt;map()&lt;/code&gt; function from the &lt;code&gt;{purrr}&lt;/code&gt; package to iterate over a vector of manufacturers and pass the elements to our &lt;code&gt;plot_manufacturer()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;groups &amp;lt;- unique(mpg$manufacturer)
map(groups, ~plot_manufacturer(group = .x))&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://cedricscherer.com/post/2023-07-07-automate-plotting-ggplot-purrr_files/figure-html/purrr-function-scatter-highlight-plots-1.png&#34; width=&#34;1920&#34; /&gt;
&lt;figcaption&gt;
All 15 scatter plots for the manufacturers featured in the 2008 car fuel data.
&lt;/figcaption&gt;
&lt;/div&gt;
&lt;div id=&#34;complex&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;A More Complex Example&lt;/h2&gt;
&lt;p&gt;Let’s consider a more complex visualization which consists of multiple plots. As before, we first check the input and filter the data. Afterwards, we create three plots and combine them with the help of the &lt;code&gt;{patchwork}&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;The main plot is again a scatter plot of displacement versus highway miles per gallon. This time, we do not add the other car models to our plot. To ensure that the plots cover the full range of the data, I set the axis limits based on the variable ranges of the full data set (&lt;code&gt;lims_x&lt;/code&gt; and &lt;code&gt;lims_y&lt;/code&gt; in &lt;code&gt;scale_x_continuous()&lt;/code&gt; and &lt;code&gt;scale_y_continuous()&lt;/code&gt;, respectively). The color of the points is mapped to the car type. To avoid inconsistent coloring of the points due to different car types listed per manufacturer, I create a named color vector (&lt;code&gt;pal&lt;/code&gt;) to match the colors by class (&lt;code&gt;scale_color_manual()&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;To both axes, I add marginal box plots showing the 1-D summary statistics of the variables. Again, I am applying the limits based on the full data set to match the axis ranges of the scatter plot. I also remove all non-data elements (&lt;code&gt;theme_void()&lt;/code&gt;) and the axis guides (&lt;code&gt;guide = &#34;none&#34;&lt;/code&gt; in the positional scales).&lt;/p&gt;
&lt;p&gt;Another function argument allows to control whether the plot is saved to disk (&lt;code&gt;save = TRUE&lt;/code&gt;) or not (&lt;code&gt;save = FALSE&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_manufacturer_marginal &amp;lt;- function(group, save = FALSE) {
  
  ## check if input is valid
  if (!group %in% mpg$manufacturer) stop(&amp;quot;Manufacturer not listed in the data set.&amp;quot;)
  if (!is.logical(save)) stop(&amp;quot;save should be either TRUE or FALSE.&amp;quot;)
  
  ## filter data
  data &amp;lt;- filter(mpg, manufacturer %in% group)
  
  ## set limits
  lims_x &amp;lt;- range(mpg$hwy) 
  lims_y &amp;lt;- range(mpg$displ)
  
  ## define colors
  pal &amp;lt;- RColorBrewer::brewer.pal(n = n_distinct(mpg$class), name = &amp;quot;Dark2&amp;quot;)
  names(pal) &amp;lt;- unique(mpg$class)
  
  ## scatter plot
  main &amp;lt;- ggplot(data, aes(x = hwy, y = displ, color = class)) +
    geom_point(size = 3, alpha = .5) +
    scale_x_continuous(limits = lims_x, breaks = 2:8*5) +
    scale_y_continuous(limits = lims_y) +
    scale_color_manual(values = pal, name = NULL) +
    labs(x = &amp;quot;Highway miles per gallon&amp;quot;, y = &amp;quot;Displacement&amp;quot;) +
    theme(legend.position = &amp;quot;bottom&amp;quot;)
  
  ## boxplots
  right &amp;lt;- ggplot(data, aes(x = manufacturer, y = displ)) +
    geom_boxplot(linewidth = .7, color = &amp;quot;grey45&amp;quot;) +
    scale_y_continuous(limits = lims_y, guide = &amp;quot;none&amp;quot;, name = NULL) +
    scale_x_discrete(guide = &amp;quot;none&amp;quot;, name = NULL) +
    theme_void()
  
  top &amp;lt;- ggplot(data, aes(x = hwy, y = manufacturer)) +
    geom_boxplot(linewidth = .7, color = &amp;quot;grey45&amp;quot;) +
    scale_x_continuous(limits = lims_x, guide = &amp;quot;none&amp;quot;, name = NULL) +
    scale_y_discrete(guide = &amp;quot;none&amp;quot;, name = NULL) +
    theme_void()
  
  ## combine plots
  p &amp;lt;- top + plot_spacer() + main + right + 
    plot_annotation(title = group) + 
    plot_layout(widths = c(1, .05), heights = c(.1, 1))
  
  ## save multi-panel plot
  if (isTRUE(save)) {
    ggsave(p, filename = paste0(group, &amp;quot;.pdf&amp;quot;), 
           width = 6, height = 6, device = cairo_pdf)
  }
  
  return(p)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can apply the function to manufacturers line by line:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_manufacturer_marginal(&amp;quot;Dodge&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://cedricscherer.com/post/2023-07-07-automate-plotting-ggplot-purrr_files/figure-html/run-function-scatter-boxplots-dodge-1.png&#34; width=&#34;864&#34; /&gt;
&lt;figcaption&gt;
There are 11 cars listed that are produced by Dodge: 5 minivans, 12 pickups, and 4 SUVs.
&lt;/figcaption&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_manufacturer_marginal(&amp;quot;Nissan&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://cedricscherer.com/post/2023-07-07-automate-plotting-ggplot-purrr_files/figure-html/run-function-scatter-boxplots-nissan-1.png&#34; width=&#34;864&#34; /&gt;
&lt;figcaption&gt;
The 7 Nissan cars belong either to the midsize or the SUV class.
&lt;/figcaption&gt;
&lt;p&gt;Or we iterate over the vector of manufacturers with the &lt;code&gt;{purrr}&lt;/code&gt; package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;map(groups, ~plot_manufacturer_marginal(.x))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you wish to only save the visualizations but not plot them, use the &lt;code&gt;walk()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;walk(groups, ~plot_manufacturer_marginal(.x, save = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;variables&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;An Example with Variables as Inputs&lt;/h2&gt;
&lt;p&gt;To wrap up, let’s consider the use case of exploring the data set. We create a general function that works with any data set and two numeric variables. Based on these three inputs, the function generates a scatter plot with a linear fitting.&lt;/p&gt;
&lt;p&gt;In addition, we allow to define a variable to encode points by color as well as to control the size and transparency of the points. If the user passes a column for color encoding, we either use (i) a categorical palette and linear fittings for each group for qualitative variables or (ii) a sequential palette with a single smoothing line for quantitative variables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_scatter_lm &amp;lt;- function(data, var1, var2, pointsize = 2, transparency = .5, color = &amp;quot;&amp;quot;) {
  
  ## check if inputs are valid
  if (!is.data.frame(data)) stop(&amp;quot;data needs to be a data frame.&amp;quot;)
  if (!is.numeric(pull(data[var1]))) stop(&amp;quot;Column var1 needs to be of type numeric, passed as string.&amp;quot;)
  if (!is.numeric(pull(data[var2]))) stop(&amp;quot;Column var2 needs to be of type numeric, passed as string.&amp;quot;)
  if (!is.numeric(pointsize)) stop(&amp;quot;pointsize needs to be of type numeric.&amp;quot;)
  if (!is.numeric(transparency)) stop(&amp;quot;transparency needs to be of type numeric.&amp;quot;)
  if (color != &amp;quot;&amp;quot;) { if (!color %in% names(data)) stop(&amp;quot;Column color needs to be a column of data, passed as string.&amp;quot;) }
  
  g &amp;lt;- 
    ggplot(data, aes(x = !!sym(var1), y = !!sym(var2))) +
    geom_point(aes(color = !!sym(color)), size = pointsize, alpha = transparency) +
    geom_smooth(aes(color = !!sym(color), color = after_scale(prismatic::clr_darken(color, .3))), 
                method = &amp;quot;lm&amp;quot;, se = FALSE) +
    theme_minimal(base_family = &amp;quot;Roboto Condensed&amp;quot;, base_size = 15) +
    theme(panel.grid.minor = element_blank(),
          legend.position = &amp;quot;top&amp;quot;)
   
  if (color != &amp;quot;&amp;quot;) { 
    if (is.numeric(pull(data[color]))) {
      g &amp;lt;- g + scale_color_viridis_c(direction = -1, end = .85) +
        guides(color = guide_colorbar(
          barwidth = unit(12, &amp;quot;lines&amp;quot;), barheight = unit(.6, &amp;quot;lines&amp;quot;), title.position = &amp;quot;top&amp;quot;
        ))
    } else {
      g &amp;lt;- g + scale_color_brewer(palette = &amp;quot;Set2&amp;quot;)
    }
  }
    
  return(g)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To iterate over the function, we have two options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we can fix one variable and pass the other as vector with &lt;code&gt;map()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;we can pass two variables as vectors to &lt;code&gt;var1&lt;/code&gt; and &lt;code&gt;var2&lt;/code&gt; with &lt;code&gt;map2()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s consider an example in which we vary both positional variables, using the 2008 car fuel data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;map2(
  c(&amp;quot;displ&amp;quot;, &amp;quot;displ&amp;quot;, &amp;quot;hwy&amp;quot;), 
  c(&amp;quot;hwy&amp;quot;, &amp;quot;cty&amp;quot;, &amp;quot;cty&amp;quot;),
  ~plot_scatter_lm(
    data = mpg, var1 = .x, var2 = .y, 
    color = &amp;quot;cyl&amp;quot;, pointsize = 3.5
  )
)&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://cedricscherer.com/post/2023-07-07-automate-plotting-ggplot-purrr_files/figure-html/purrr-function-scatter-lm-plots-1.png&#34; width=&#34;1440&#34; /&gt;
&lt;figcaption&gt;
Scatter plot showing the linear trends for different combinations of &lt;code&gt;displ&lt;/code&gt;, &lt;code&gt;cty&lt;/code&gt;, and &lt;code&gt;hwy&lt;/code&gt; for the 2008 car fuel data. As the number of cylinders is encoded as numeric, the sequential green-purple viridis scale is applied to the points.
&lt;/figcaption&gt;
&lt;p&gt;Now we are going to apply our function to a different data set, the &lt;a href=&#34;https://allisonhorst.github.io/palmerpenguins/&#34;&gt;Palmer penguins&lt;/a&gt; to visualize x-y relationships per species. We automatically iterate over all combinations of a set of chosen numeric variables: we first generate a vector containing the column names of interest (&lt;code&gt;names&lt;/code&gt;) and then create a data frame with all possible combinations (&lt;code&gt;names_set&lt;/code&gt;) with the help of &lt;code&gt;expand_grid()&lt;/code&gt; from the &lt;code&gt;{tidyr}&lt;/code&gt; package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## set up variables of interest
names &amp;lt;- c(&amp;quot;bill_length_mm&amp;quot;, &amp;quot;bill_depth_mm&amp;quot;, &amp;quot;flipper_length_mm&amp;quot;, &amp;quot;body_mass_g&amp;quot;)
## ... and create all possible combinations
names_set &amp;lt;- tidyr::expand_grid(names, names)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using another mapping function from the &lt;code&gt;{purrr}&lt;/code&gt; package called &lt;code&gt;pmap()&lt;/code&gt;, we can map over multiple arguments simultaneously:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pmap(
  names_set, ~plot_scatter_lm(
    data = palmerpenguins::penguins, 
    var1 = .x, var2 = .y, color = &amp;quot;species&amp;quot;
  )
)&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://cedricscherer.com/post/2023-07-07-automate-plotting-ggplot-purrr_files/figure-html/purrr-function-scatter-lm-penguins-plots-1.png&#34; width=&#34;1920&#34; /&gt;
&lt;figcaption&gt;
Scatter plots for each combination of four numeric variables of the Palmer penguins data set. Passing the categorical variable species to &lt;code&gt;color&lt;/code&gt; in our custom function returns linear smoothing lines for each of the three groups which are encoded with a categorical palette from the ColorBrewer project.
&lt;/figcaption&gt;
&lt;div id=&#34;shortcuts&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Shortcuts for Explorative Plots&lt;/h4&gt;
&lt;div id=&#34;plot&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;&lt;code&gt;plot()&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;I am not a fan of base R plots but one big advantage is the behavior when applying the &lt;code&gt;plot()&lt;/code&gt; function to a full data set. The output is a grid of plots showing the relationship of all variable combinations:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(palmerpenguins::penguins)&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://cedricscherer.com/post/2023-07-07-automate-plotting-ggplot-purrr_files/figure-html/base-plot-data-1.png&#34; width=&#34;672&#34; /&gt;
&lt;figcaption&gt;
Running &lt;code&gt;plot()&lt;/code&gt; on a data frame returns a grid of scatter plots visualizing the x-y relationships of all possible combinations of variables.
&lt;/figcaption&gt;
&lt;/div&gt;
&lt;div id=&#34;facet_matrix&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;&lt;code&gt;facet_matrix()&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;A similar, and more flexible take on this idea is the &lt;code&gt;facet_matrix()&lt;/code&gt; functionality from the &lt;a href=&#34;https://ggforce.data-imaginist.com/&#34;&gt;&lt;code&gt;{ggforce}&lt;/code&gt; package&lt;/a&gt;. Instead of passing variable names in the aesthetics, we specify placeholders called &lt;code&gt;.panel_x&lt;/code&gt; and &lt;code&gt;.panel_y&lt;/code&gt;. We then create our ggplot as usual by adding layers and scales.&lt;/p&gt;
&lt;p&gt;Finally, we specify the variables to use in the facet inside the &lt;code&gt;facet_matrix()&lt;/code&gt; component. You can also specify specific layers for different areas (upper, diagonal, lower) inside &lt;code&gt;facet_matrix()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(palmerpenguins::penguins, aes(x = .panel_x, y = .panel_y)) +
  geom_point(aes(color = species), alpha = .5) +
  geom_smooth(aes(color = species), method = &amp;quot;lm&amp;quot;) +
  ggforce::geom_autodensity(aes(color = species, fill = after_scale(color)), alpha = .7) +
  scale_color_brewer(palette = &amp;quot;Set2&amp;quot;, name = NULL) +
  ggforce::facet_matrix(vars(names), layer.lower = 2, layer.diag = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;https://cedricscherer.com/post/2023-07-07-automate-plotting-ggplot-purrr_files/figure-html/facet-matrix-layers-1.png&#34; width=&#34;1152&#34; /&gt;
&lt;figcaption&gt;
&lt;code&gt;facet_matrix()&lt;/code&gt; from the &lt;code&gt;{ggforce}&lt;/code&gt; package offers a great way to generate similar grids with &lt;code&gt;{ggplot2}&lt;/code&gt;, allowing for the usual flexibility in terms of fine-tuning and polishing. By specifying different layers for the three areas , we can combine all kind of chart types to visualize the relationships of the variables.
&lt;/figcaption&gt;
&lt;hr /&gt;
&lt;details&gt;
&lt;summary style=&#34;font-size:10pt;&#34;&gt;
R Session Info
&lt;/summary&gt;
&lt;pre&gt;&lt;code&gt;## R version 4.2.3 (2023-03-15)
## Platform: x86_64-apple-darwin17.0 (64-bit)
## Running under: macOS Big Sur ... 10.16
## 
## Matrix products: default
## BLAS:   /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRblas.0.dylib
## LAPACK: /Library/Frameworks/R.framework/Versions/4.2/Resources/lib/libRlapack.dylib
## 
## locale:
## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
## [1] patchwork_1.1.2 dplyr_1.1.2     purrr_1.0.1     ggplot2_3.4.1  
## 
## loaded via a namespace (and not attached):
##  [1] tidyselect_1.2.0     xfun_0.39            bslib_0.4.2          splines_4.2.3        lattice_0.20-45      colorspace_2.1-0     vctrs_0.6.2         
##  [8] generics_0.1.3       htmltools_0.5.4      viridisLite_0.4.1    yaml_2.3.7           mgcv_1.8-42          utf8_1.2.3           rlang_1.1.1         
## [15] jquerylib_0.1.4      pillar_1.9.0         glue_1.6.2           withr_2.5.0          tweenr_2.0.2         palmerpenguins_0.1.1 RColorBrewer_1.1-3  
## [22] lifecycle_1.0.3      stringr_1.5.0        munsell_0.5.0        blogdown_1.18        gtable_0.3.1         ragg_1.2.5           evaluate_0.20       
## [29] labeling_0.4.2       knitr_1.42           fastmap_1.1.1        fansi_1.0.4          highr_0.10           Rcpp_1.0.10          scales_1.2.1        
## [36] cachem_1.0.7         jsonlite_1.8.4       farver_2.1.1         systemfonts_1.0.4    textshaping_0.3.6    ggforce_0.4.1        digest_0.6.31       
## [43] stringi_1.7.12       bookdown_0.34        polyclip_1.10-4      grid_4.2.3           cli_3.6.0            tools_4.2.3          magrittr_2.0.3      
## [50] sass_0.4.5           tibble_3.2.1         tidyr_1.3.0          pkgconfig_2.0.3      MASS_7.3-58.2        Matrix_1.5-3         rmarkdown_2.20      
## [57] rstudioapi_0.14      R6_2.5.1             prismatic_1.1.1      nlme_3.1-162         compiler_4.2.3&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>ggplot2</title>
      <link>https://cedricscherer.com/tags/ggplot2/</link>
      <pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/ggplot2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Posts</title>
      <link>https://cedricscherer.com/post/</link>
      <pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/post/</guid>
      <description></description>
    </item>
    
    <item>
      <title>R</title>
      <link>https://cedricscherer.com/tags/r/</link>
      <pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/r/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tags</title>
      <link>https://cedricscherer.com/tags/</link>
      <pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/</guid>
      <description></description>
    </item>
    
    <item>
      <title>tidyverse</title>
      <link>https://cedricscherer.com/tags/tidyverse/</link>
      <pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/tidyverse/</guid>
      <description></description>
    </item>
    
    <item>
      <title>tips</title>
      <link>https://cedricscherer.com/tags/tips/</link>
      <pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/tips/</guid>
      <description></description>
    </item>
    
    <item>
      <title>tutorial</title>
      <link>https://cedricscherer.com/tags/tutorial/</link>
      <pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/tutorial/</guid>
      <description></description>
    </item>
    
    <item>
      <title>workflow</title>
      <link>https://cedricscherer.com/tags/workflow/</link>
      <pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/workflow/</guid>
      <description></description>
    </item>
    
    <item>
      <title>30DayChartChallenge</title>
      <link>https://cedricscherer.com/tags/30daychartchallenge/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/30daychartchallenge/</guid>
      <description></description>
    </item>
    
    <item>
      <title>challenge</title>
      <link>https://cedricscherer.com/tags/challenge/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/challenge/</guid>
      <description></description>
    </item>
    
    <item>
      <title>community</title>
      <link>https://cedricscherer.com/tags/community/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/community/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Nightingale</title>
      <link>https://cedricscherer.com/tags/nightingale/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/nightingale/</guid>
      <description></description>
    </item>
    
    <item>
      <title>social media</title>
      <link>https://cedricscherer.com/tags/social-media/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/tags/social-media/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The 30DayChartChallenge is Ready to Kick Off</title>
      <link>https://cedricscherer.com/2021/05/09/the-30daychartchallenge-year-three-kick-off/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/2021/05/09/the-30daychartchallenge-year-three-kick-off/</guid>
      <description>&lt;p&gt;This blog post originally appeared as a &lt;a href=&#34;https://nightingaledvs.com/the-30daychartchallenge-year-three/&#34;&gt;post on &amp;ldquo;Nightingale&amp;rdquo;&lt;/a&gt;, the &lt;a href=&#34;https://nightingaledvs.com/&#34;&gt;journal of the Data Visualization Society&lt;/a&gt;. Thanks to Claire Santos for all the helpful comments on and revisions of the draft!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;The &lt;a href=&#39;https://twitter.com/30daychartchall&#39; style=&#39;font-weight:800;&#39;&gt;#30DayChartChallenge&lt;/a&gt; is a data visualization community challenge with the aim of creating a data visualization on a particular theme for each day in April. The challenge began in April 2021 and has continued every year since. Indeed, the third edition of the #30DayChartChallenge starts in a few days—and we have just shared this year’s prompts, if you want to get a head start!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Read on for a behind-the-scenes look at the two previous years’ challenges, then join us on social media (Twitter, Instagram, LinkedIn, and Mastodon) to participate.&lt;/p&gt;
&lt;h2 id=&#34;the-birth-of-the-30daychartchallenge&#34;&gt;The Birth of the #30DayChartChallenge&lt;/h2&gt;
&lt;p&gt;The #30DayChartChallenge was inspired by the &lt;a href=&#34;https://30daymapchallenge.com/&#34;&gt;#30DayMapChallenge&lt;/a&gt;, which was &lt;a href=&#34;https://twitter.com/tjukanov/status/1187713840550744066&#34;&gt;initiated by Topi Tjukanov in 2019&lt;/a&gt; and focuses, as the name suggests, on creating 30 maps in 30 days, with a particular theme for each day. Those themes occasionally suggest a certain topic or data set, but many are open-ended—for example, the theme might be “experimental” or it might be a specific color or geometry. The #30DayMapChallenge attracts many participants, and also passive spectators, from around the world, who use a wide range of tools to create static, animated, and interactive maps on a diversity of topics.&lt;/p&gt;
&lt;p&gt;During the second edition of the map challenge in 2020, &lt;a href=&#34;https://twitter.com/dr_xeo/status/1333479448746860544&#34;&gt;Dominic Royé proposed to organize something similar&lt;/a&gt; with a focus on all kinds of charts, not just maps. When &lt;a href=&#34;https://twitter.com/dr_xeo/status/1333484208292044801&#34;&gt;Dominic tagged me in this discussion&lt;/a&gt;, I was a big fan of the idea and was all in. Both of us love maps and are skilled at creating spatial visualizations quickly, but for the many people who have never worked with spatial data, it seemed too difficult to find suitable data sources and navigate the quirks of map projections and unusual map types. Creating a similar challenge that was more open to the general data visualization community and that would allow for more flexibility in storytelling sounded like a great idea.&lt;/p&gt;
&lt;p&gt;At the beginning of 2021, Dominic and I began to organize the event and brainstorm the daily themes. We went back and forth on how to select the themes. One idea we had was to use only chart types as prompts; we also considered restricting the challenge to a single data set. In the end, we decided to allow for a lot of freedom, hoping to see a variety of interpretations by participants. We ended up grouping the prompts into five data visualization types, loosely following &lt;a href=&#34;https://policyviz.com/2014/09/09/graphic-continuum&#34;&gt;“The Graphic Continuum”&lt;/a&gt; by Jonathan Schwabish and Severino Ribecca.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/image7.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain;&#34;&gt;&lt;figcaption&gt;The prompts of the first edition of the #30DayChartChallenge in 2021, grouped into five categories of data visualization types.&lt;/figcaption&gt;&lt;/p&gt;
&lt;p&gt;The 2021 challenge proved to be popular, with almost 2,000 data visualizations shared on Twitter with the hashtag #30DayChartChallenge. The daily, monthlong format is definitely demanding and time-consuming, so we did see a drop in contributions as the challenge progressed. Nevertheless, a number of participants showed incredible persistence and contributed all 30 days!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cedricscherer.com/img/chart-challenge/timeseries_category.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain;&#34;&gt;&lt;figcaption&gt;A visualization of all visualizations shared on Twitter with the hashtag #30DayChartChallenge in 2021. The bars are grouped by categories and made up from the 1,960 individual contributions.&lt;/figcaption&gt;&lt;/p&gt;
&lt;h2 id=&#34;the-challenge-matures&#34;&gt;The Challenge Matures&lt;/h2&gt;
&lt;p&gt;For the 2022 challenge, we adjusted the prompts a bit but stayed with the five main categories. We replaced some prompts for the sake of variety, especially for people who were participating for the second time. We also introduced two new types of prompts—“data days” and “theme days”—which provided specific data source and design theme prompts. The goal of “data days” and “theme days” was to make it easier for people to participate by reducing the need to come up with their own data and visualization styles every day.&lt;/p&gt;
&lt;p&gt;We also liked the idea of being able to compare submissions that all used the same data source or design aesthetic. Our two theme days in 2022 prompted participants to create charts in two distinctive newsroom styles—a distribution chart styled as in The Economist, and a time series styled as in the Financial Times.&lt;/p&gt;
&lt;h2 id=&#34;the-third-edition-is-happening-now&#34;&gt;The Third Edition is Happening Now!&lt;/h2&gt;
&lt;p&gt;The third edition of the #30DayChartChallenge will begin on April 1. This year’s challenge follows the same approach as in 2022, with some new topics and dedicated data and theme days.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/image1.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain;&#34;&gt;&lt;figcaption&gt;The prompts of the upcoming 3rd edition featuring dedicated data and theme days on the last day of each category.&lt;/figcaption&gt;&lt;/p&gt;
&lt;p&gt;The data days cover the fantastic open-data portals by &lt;a href=&#34;https://ourworldindata.org/&#34;&gt;OurWorldInData&lt;/a&gt;, &lt;a href=&#34;https://ec.europa.eu/eurostat&#34;&gt;EuroStat&lt;/a&gt;, and the &lt;a href=&#34;https://data.worldbank.org/&#34;&gt;World Bank&lt;/a&gt;. The theme days feature the popular &lt;a href=&#34;https://www.bbc.com/news/11628973&#34;&gt;BBC News&lt;/a&gt; and &lt;a href=&#34;https://www.unwomen.org/en/digital-library/multimedia/2020/2/infographic-visualizing-the-data-womens-representation&#34;&gt;UN Women&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/UNWomen.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain;&#34;&gt;&lt;figcaption&gt;Two screenshots of animations visualizing data on “Women’s representation in society” from UN Women, the United Nations entity dedicated to gender equality and the empowerment of women.&lt;/figcaption&gt;&lt;/p&gt;
&lt;h2 id=&#34;the-value-and-challenge-of-challenges&#34;&gt;The Value and Challenge of Challenges&lt;/h2&gt;
&lt;p&gt;After two years of organizing the #30DayChartChallenge, we can confidently say that challenges like this one are a great way to practice and experiment with data visualization design, test new tools and data sources, build a portfolio, share work publicly and receive feedback, interact with like-minded people, and most importantly be creative and have fun. The feedback from both contributors and spectators in previous years has been largely positive. We saw many supportive conversations happening around participants’ data visualizations, chart types, suitability of tools for a certain task, and design choices.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/Feedback-1.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain;&#34;&gt;&lt;figcaption&gt;Examples of positive feedback and support throughout the challenge on Twitter.&lt;/figcaption&gt;&lt;/p&gt;
&lt;p&gt;Nevertheless, some critical voices also spoke up and made me think about the trade-off between the benefits of challenges like this one and their potential harms. For example, one comment read:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I don’t want to criticise the challenge, a lot of people will learn a ton from participating and seeing the output. But it does bother me that the daily pressure can easily lead to false claims or misleading charts. In my view, if you put a chart out there, you have a responsibility of being truthful, or at least as truthful as possible. And that takes time, as any data journalist will tell you. So I feel there is a mismatch between the format of a challenge and the craft of making dataviz.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Creating a visualization in a short time, especially if you are working on it outside of a regular job and family or other duties, is definitely hard; it’s true that the time available to spend on data exploration, research, and validation is limited. However, we experienced that participants in general seemed very open and honest about the potential limitations of their data sources and visualizations. When something was unintentionally wrong in their first iteration, they often shared an updated version later.&lt;/p&gt;
&lt;p&gt;Nevertheless, this is a valid criticism and we, Dominic and I as organizers, but also we as a community, have to keep this in mind. Most importantly, we need to be careful when creating and sharing our own visualizations and chime in if we spot something potentially misleading or suspicious.&lt;/p&gt;
&lt;p&gt;However, we are convinced that the value of these challenges are manifold, from education to building future interest in your work. Problems of sloppy chart design and data sources used to support false claims are broader issues not unique to challenges like the #30DayMapChallenge, though they certainly warrant continued discussion and consideration.&lt;/p&gt;
&lt;h2 id=&#34;highlights-from-the-previous-editions&#34;&gt;Highlights From the Previous Editions&lt;/h2&gt;
&lt;p&gt;We saw a ton of visualizations shared through the challenge, many of them quite well executed and creative. While the number of great visualizations is too many to feature in this article, I want to highlight a few that stuck with me. (You can check out more using the hashtag &lt;a href=&#34;https://twitter.com/hashtag/30DayChartChallenge?src=hashtag_click&#34;&gt;#30DayChartChallenge&lt;/a&gt; on social media.)&lt;/p&gt;
&lt;p&gt;Join us for the 2023 Challenge, and let’s see what you can create!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i0.wp.com/nightingaledvs.com/wp-content/uploads/2023/03/Submissions_sm.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain;&#34;&gt;&lt;figcaption&gt;Examples of memorable submissions demonstrating a variety of approaches, tools, and data.&lt;/figcaption&gt;&lt;/p&gt;
&lt;h3 id=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/h3&gt;
&lt;p&gt;First of all I want to thank Dominic who came up with the idea and invited me to join him as a co-founder. Also, thanks to Wendy Shijia, Marco Sciaini and Paula Casado for your support with organizing the challenge. A special shout-out to Topi Tjukanov for creating the #30DayMapChallenge, which served as the template for our challenge. Thank you for this fun project that allowed me to strengthen my spatial data visualization skills and was and remains a steady source of inspiration! And of course, a big thank you to everyone participating in the challenge, watching and sharing the contributions, and providing feedback and praise!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2-Day Workshop on &#34;Graphic Design with ggplot2&#34; at rstudio::conf 2022</title>
      <link>https://cedricscherer.com/2022/08/09/2-day-workshop-on-graphic-design-with-ggplot2-at-rstudioconf-2022/</link>
      <pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cedricscherer.com/2022/08/09/2-day-workshop-on-graphic-design-with-ggplot2-at-rstudioconf-2022/</guid>
      <description>&lt;img src=&#34;https://raw.githubusercontent.com/rstudio-conf-2022/ggplot2-graphic-design/main/images/logo.png&#34; style=&#34;float:right;padding: 0 0 0 10px;margin: 20px -10px 0 0 &#34; fig-alt=&#34;Course Hex Logo&#34; width=&#34;175&#34;&gt;
&lt;p&gt;&lt;strong&gt;End of July, I had the honor to teach a &lt;a href=&#39;https://www.rstudio.com/blog/rstudio-conf-2022-workshops/&#39; style=&#39;font-weight:800;&#39;&gt;2-day, in-person workshop on &amp;ldquo;Graphic Design with ggplot2&amp;rdquo; at the rstudio::conf(2022)&lt;/a&gt; in Washington DC. Invited by RStudio (now named &lt;a href=&#39;https://posit.co/&#39; style=&#39;font-weight:800;&#39;&gt;Posit&lt;/a&gt;), I developed a new course that covers the most important steps and helpful tips to create visually appealing, engaging and complex graphics with ggplot2. The course focused on the main concepts of the grammar of graphics and used hands-on examples to explore ggplot2’s utility to create multi-layered, more complex graphs. &lt;a href=&#39;https://rstudio-conf-2022.github.io/ggplot2-graphic-design/&#39; style=&#39;font-weight:800;&#39;&gt;All course resources are available as open-source material on the course page.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The course webpage as well ass the slidedecks and the exercises and solutions were developed with the new open-source scientific and technical publishing system &lt;a href=&#39;https://quarto.org/&#39; target=&#34;_blank&#34;&gt;Quarto&lt;/a&gt;. The new workshop development was a perfect opportunity to give it a try and the experience was overall wonderful—the &lt;a href=&#39;https://revealjs.com/&#39; target=&#34;_blank&#34;&gt;reveal.js&lt;/a&gt; integration for the slides works perfect and allows for a lot of customization. Thanks to Marco Sciaini for helping me setting up the course webpage which was, after learning about a few quirks, a smooth experience as well.&lt;/p&gt;
&lt;img src=&#34;img/rstudioconf-workshop/graphic-design-course-page.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://rstudio-conf-2022.github.io/ggplot2-graphic-design&#39;, &#39;blank&#39;);&#34;&gt;
&lt;figcaption&gt;The &lt;a href=&#39;https://rstudio-conf-2022.github.io/ggplot2-graphic-design&#39;&gt;course webpage&lt;/a&gt; which gives an overview of the course objectives and links to all session and the &lt;a href=&#39;https://github.com/rstudio-conf-2022/ggplot2-graphic-design&#39;&gt;GitHub repository&lt;/a&gt;.&lt;/figcaption&gt;
&lt;iframe class=&#34;slide-deck&#34; src=&#34;https://rstudio-conf-2022.github.io/ggplot2-graphic-design/materials/01_introduction.html&#34; height=&#34;420&#34; width=&#34;747&#34; style=&#34;border: 1px solid #2e3846;&#34;&gt;&lt;/iframe&gt;
&lt;figcaption&gt;The slide decks can be hosted as HTML files and thus embedded in the course pages.&lt;/figcaption&gt;
&lt;p&gt;The workshop is structured in 9 sessions, covering both ggplot2 techniques and general data visualization recommendations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#39;https://rstudio-conf-2022.github.io/ggplot2-graphic-design/modules/d1-01_introduction.html&#39; target=&#34;_blank&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://rstudio-conf-2022.github.io/ggplot2-graphic-design/modules/d1-02_concepts_pt1.html&#39; target=&#34;_blank&#34;&gt;Concepts of the ggplot2 Package Pt. 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://rstudio-conf-2022.github.io/ggplot2-graphic-design/modules/d1-05_concepts_pt2.html&#39; target=&#34;_blank&#34;&gt;Concepts of the ggplot2 Package Pt. 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://rstudio-conf-2022.github.io/ggplot2-graphic-design/modules/d1-09_data_com.html&#39; target=&#34;_blank&#34;&gt;Data Communication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://rstudio-conf-2022.github.io/ggplot2-graphic-design/modules/d2-01_lab_ann.html&#39; target=&#34;_blank&#34;&gt;Working with Labels &amp;amp; Annotations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://rstudio-conf-2022.github.io/ggplot2-graphic-design/modules/d2-03_colorful_graphics.html&#39; target=&#34;_blank&#34;&gt;Colorful Graphics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://rstudio-conf-2022.github.io/ggplot2-graphic-design/modules/d2-04_colors.html&#39; target=&#34;_blank&#34;&gt;Working with Colors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;Working with Layouts &amp; Composition&#39; target=&#34;_blank&#34;&gt;Working with Layouts and Composition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://rstudio-conf-2022.github.io/ggplot2-graphic-design/modules/d2-08_project.html&#39; target=&#34;_blank&#34;&gt;Group Projects&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The session pages contain not only the slides but also hands-on R codes, recap notes, exercises including prepared scripts (either as Quarto or Rmarkdown reports) and step-by-step solutions.&lt;/p&gt;
&lt;img src=&#34;img/rstudioconf-workshop/session-example-colors.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://rstudio-conf-2022.github.io/ggplot2-graphic-design/modules/d2-04_colors.html&#39;, &#39;blank&#39;);&#34;&gt;
&lt;figcaption&gt;The session pages feature slides, session outline, recap and exercises as well as links to the hands-on codes and solutions.&lt;/figcaption&gt;
&lt;img src=&#34;img/rstudioconf-workshop/exercise-code-example-annotations.png&#34; style=&#34;height: 100%; width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://rstudio-conf-2022.github.io/ggplot2-graphic-design/materials/exercises/05_annotations_ex1.html&#39;, &#39;blank&#39;);&#34;&gt;
&lt;figcaption&gt;The exercises are pre-written Quarto (or Rmarkdown) reports to allow for a quick start and the ability to keep a rendered version of the personal solution.&lt;/figcaption&gt;
&lt;p&gt;Here is an overview of all recaps:&lt;/p&gt;
&lt;h4 id=&#34;concepts-of-the-ggplot2-package-pt-1&#34;&gt;Concepts of the &lt;code&gt;{ggplot2}&lt;/code&gt; Package Pt. 1&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;{ggplot2}&lt;/code&gt;&lt;/strong&gt; is a powerful library for reproducible graphic design&lt;/li&gt;
&lt;li&gt;the components follow a consistent syntax&lt;/li&gt;
&lt;li&gt;each ggplot needs at least &lt;strong&gt;data&lt;/strong&gt;, some &lt;strong&gt;aesthetics&lt;/strong&gt;, and a &lt;strong&gt;layer&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;we &lt;strong&gt;set&lt;/strong&gt; constant propeties outside &lt;code&gt;aes()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip; and &lt;strong&gt;map&lt;/strong&gt; data-related properties inside &lt;code&gt;aes()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;local settings and mappings override global properties&lt;/li&gt;
&lt;li&gt;grouping allows applying layers for subsets&lt;/li&gt;
&lt;li&gt;we can store a ggplot object and extend it afterwards&lt;/li&gt;
&lt;li&gt;we can change the appearance for all plots with &lt;code&gt;theme_set()&lt;/code&gt; and &lt;code&gt;theme_update()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;concepts-of-the-ggplot2-package-pt-2&#34;&gt;Concepts of the &lt;code&gt;{ggplot2}&lt;/code&gt; Package Pt. 2&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;facet_*()&lt;/code&gt; functions allow to create small multiples&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale_*()&lt;/code&gt; functions translate between aesthetics and properties&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;*_continuous()&lt;/code&gt; for numerical data&lt;/li&gt;
&lt;li&gt;&amp;hellip; and &lt;code&gt;*_discrete()&lt;/code&gt; for categorical data&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;scale_color|fill_*()&lt;/code&gt; to customize data-related colors&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coord_*()&lt;/code&gt; functions interpret the positional aesthetics, e.g. create polar plots or work with spatial projections&lt;/li&gt;
&lt;li&gt;be careful when adjusting axis limits:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scale_*_continuous(limits)&lt;/code&gt; removes the data outside the range&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coord_*(*lim)&lt;/code&gt; keeps the data and zooms into the range&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;data-communication&#34;&gt;Data Communication&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Visualizing data is helpful to gain insights and discover anomalies&lt;/li&gt;
&lt;li&gt;The design process of data visualizations can be broken down to 4 levels:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Information&lt;/strong&gt;: understand the data and be accurate&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Story&lt;/strong&gt;: be clear about the message of the visualization&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Goal&lt;/strong&gt;: select charts that successfully transport the story&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Visual form&lt;/strong&gt;: follow design rules and data visualization principles&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;working-with-annotations--labels&#34;&gt;Working with Annotations &amp;amp; Labels&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;style labels such as title, axis and legend texts with &lt;code&gt;theme()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;format data-related labels with the &lt;code&gt;labels&lt;/code&gt; argument of &lt;code&gt;scale_*()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;adjust strip text with the &lt;code&gt;facet_*(labeller)&lt;/code&gt; functionality&lt;/li&gt;
&lt;li&gt;add data-related annotations with &lt;code&gt;geom_text|label()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip; and data-unrelated annotations with &lt;code&gt;annotate()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;annotation_custom(rasterGrob())&lt;/code&gt; is a basic way to add images&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{ggtext}&lt;/code&gt; allows to render labels with markdown and basic html&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{ggtext}&lt;/code&gt; also allows to add dynamic linebreaks and images&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{ggrepel}&lt;/code&gt; ensures clever placement of annotations&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ggforce::geom_mark_*()&lt;/code&gt; provide a set of advanced annotations&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;colorful-graphics&#34;&gt;Colorful Graphics&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Pick the right palette type for your visualization
&lt;ul&gt;
&lt;li&gt;use &lt;strong&gt;sequential&lt;/strong&gt; to encode &lt;em&gt;numerical information with order&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;use &lt;strong&gt;diverging&lt;/strong&gt; to encode &lt;em&gt;numerical information with a critical midpoint&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;use &lt;strong&gt;qualitative&lt;/strong&gt; to encode &lt;em&gt;categorical information&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;map the color with the highest contrast of a sequential palette to the most important value&lt;/li&gt;
&lt;li&gt;for categories use a maximum of 6-8 colors&lt;/li&gt;
&lt;li&gt;test for &lt;strong&gt;color blindness&lt;/strong&gt; using a CVD simulator&lt;/li&gt;
&lt;li&gt;check the &lt;strong&gt;contrast&lt;/strong&gt; of your data and text colors&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;avoid rainbow palettes!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;working-with-colors&#34;&gt;Working with Colors&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;use &lt;strong&gt;categorical&lt;/strong&gt; palettes for &lt;strong&gt;qualitative&lt;/strong&gt; data
&lt;ul&gt;
&lt;li&gt;e.g. &lt;code&gt;scale_*_discrete()&lt;/code&gt; and &lt;code&gt;scale_*_manual()&lt;/code&gt; for custom options&lt;/li&gt;
&lt;li&gt;e.g. &lt;code&gt;scale_*_viridis_d&lt;/code&gt; and &lt;code&gt;scale_*_brewer()&lt;/code&gt; for pre-defined options&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;use &lt;strong&gt;sequential or diverging&lt;/strong&gt; palettes for &lt;strong&gt;quantitative&lt;/strong&gt; data
&lt;ul&gt;
&lt;li&gt;e.g. &lt;code&gt;scale_*_gradient()&lt;/code&gt; or &lt;code&gt;scale_*_gradient2()&lt;/code&gt; for custom options&lt;/li&gt;
&lt;li&gt;e.g. &lt;code&gt;scale_*_viridis_c&lt;/code&gt; and &lt;code&gt;scale_*_distiller()&lt;/code&gt; for pre-defined options&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;various packages provide palettes incl. &lt;code&gt;scale_*&lt;/code&gt; components
&lt;ul&gt;
&lt;li&gt;e.g. &lt;code&gt;{rcartocolors}&lt;/code&gt;, &lt;code&gt;{scico}&lt;/code&gt;, &lt;code&gt;{ggsci}&lt;/code&gt;, &lt;code&gt;{ggthemes}&lt;/code&gt;, &lt;code&gt;{nord}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;those and even more packages return palettes as vectors
&lt;ul&gt;
&lt;li&gt;modify and supply them to &lt;code&gt;scale_*_manual()&lt;/code&gt; and &lt;code&gt;scale_*_gradientn()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;use &lt;strong&gt;&lt;code&gt;after_scale&lt;/code&gt;&lt;/strong&gt; to modify and recycle color scales&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;working-with-layouts--composition&#34;&gt;Working with Layouts &amp;amp; Composition&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;guides&lt;/strong&gt; are the combination of scales and legends&lt;/li&gt;
&lt;li&gt;legends can be either modified with the &lt;code&gt;guide_*&lt;/code&gt; function in &lt;code&gt;scale_*()&lt;/code&gt; or &lt;code&gt;guides()&lt;/code&gt;  and with the &lt;code&gt;theme()&lt;/code&gt; component
qualitative&lt;/li&gt;
&lt;li&gt;&amp;hellip; while quantitative guides are &lt;code&gt;colorbar&lt;/code&gt;, &lt;code&gt;colorsteps&lt;/code&gt; or &lt;code&gt;bins&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;{patchwork}&lt;/code&gt;&lt;/strong&gt; is the most modern and simplest way to compose plots
&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;|&lt;/code&gt; to combine plots&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;plot_layout()&lt;/code&gt; to adjust the layout, widths and heights&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;plot_annotation()&lt;/code&gt; to add tags and general labels&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;inset_element()&lt;/code&gt; to add inset graphics&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
